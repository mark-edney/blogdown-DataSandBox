}
Zn <- Nr[-1,] %>% add_row(n=Nr$n[nrow(Nr)]+1)
Zr <- Nr[-1,] %>% lm(log(nn)~log(n), data=.) %>% predict(newdata=Zn)
Zr <- exp(Zr)
#creates the new adjusted counts
j <- 0
for (i in 2:nrow(Nr)) {
Nr$c[i] <-  (Nr$n[i]+1)*Nr$nn[i+1]/Nr$nn[i]
Nr$c[i][is.na(Nr$c[i])] <- 0
Nr$sc[i] <-  (Nr$n[i]+1)*Zr[i]/Zr[i-1]
if(Nr$n[i+1]-Nr$n[i] > 1 | i == nrow(Nr)){
j <- 1}
Nr$GT[i] <-  Nr$c[i]*(1-j) + Nr$sc[i]*j
}
#the specific prop from words with the same count
#Nr$GT[Nr$GT < 0] <- Nr$nn[2]/total
Nr$GT <- Nr$GT/sum(Nr$GT)
Nr$GT2 <- Nr$GT/Nr$nn
Nr
Zn <- Nr[-1,] %>% add_row(n=Nr$n[nrow(Nr)]+1)
Zr <- Nr[-1,] %>% lm(log(nn)~log(n), data=.) %>% predict(newdata=Zn)
Zr <- exp(Zr)
#creates the new adjusted counts
j <- 0
for (i in 2:nrow(Nr)) {
Nr$c[i] <-  (Nr$n[i]+1)*Nr$nn[i+1]/Nr$nn[i]
Nr$c[i][is.na(Nr$c[i])] <- 0
Nr$sc[i] <-  (Nr$n[i]+1)*Zr[i]/Zr[i-1]
if(Nr$n[i+1]-Nr$n[i] > 1 | i == nrow(Nr)){
j <- 1}
Nr$GT[i] <-  Nr$c[i]*(1-j) + Nr$sc[i]*j
}
shiny::runApp('~/R/Hopkina_Capestone/Shiny App/Capestone')
Nr
library(tidyverse)
corpus = read_rds('corpus10.rds')
unigram = read_rds('unigram10.rds')
voc <- tibble(word = unique(unigram$ngram))
ngrams <- readRDS("ngrams.rds")
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word")) %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin)
df$n[is.na(df$n)] <- 0
df %>%
ggplot(aes(x = bin, y = n)) +
geom_bar(stat = "identity")
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word")) %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin)
df$n[is.na(df$n)] <- 1
df %>%
ggplot(aes(x = bin, y = n)) +
geom_bar(stat = "identity")
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word"))
df$n[is.na(df$n)] <- 0
Nr <- count(df, n, name = "nn")
Nr %>%
head()
total <- sum(Nr$nn*Nr$n)
total
Nr <- Nr %>%
add_row(n = 0, nn = 0) %>%
arrange(n) %>%
mutate(c= 0) %>%
mutate(sc = 0) %>%
mutate(GT = 0)
Nr
Zn <- Nr[-1,] %>% add_row(n=Nr$n[nrow(Nr)]+1)
Zr <- Nr[-1,] %>% lm(log(nn)~log(n), data=.) %>% predict(newdata=Zn)
Zr <- exp(Zr)
Zn
Zr
for (i in 2:nrow(Nr)) {
Nr$c[i] <-  (Nr$n[i]+1)*Nr$nn[i+1]/Nr$nn[i]
Nr$c[i][is.na(Nr$c[i])] <- 0
Nr$sc[i] <-  (Nr$n[i]+1)*Zr[i]/Zr[i-1]
if(Nr$n[i+1]-Nr$n[i] > 1 | i == nrow(Nr)){
j <- 1}
Nr$GT[i] <-  Nr$c[i]*(1-j) + Nr$sc[i]*j
}
Nr
#the specific prop from words with the same count
Nr$GT[Nr$GT < 0] <- Nr$nn[2]/total
Nr$GT <- Nr$GT/sum(Nr$GT)
Nr$GT2 <- Nr$GT/Nr$nn
Nr
library(tidyverse)
corpus = read_rds('corpus10.rds')
unigram = read_rds('unigram10.rds')
voc <- tibble(word = unique(unigram$ngram))
ngrams <- readRDS("ngrams.rds")
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word")) %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin)
df$n[is.na(df$n)] <- 0
df %>%
ggplot(aes(x = bin, y = n)) +
geom_bar(stat = "identity")
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word")) %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin)
df$n[is.na(df$n)] <- 1
df %>%
ggplot(aes(x = bin, y = n)) +
geom_bar(stat = "identity")
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word"))
df$n[is.na(df$n)] <- 0
Nr <- count(df, n, name = "nn")
Nr %>%
head()
total <- sum(Nr$nn*Nr$n)
total
Nr <- Nr %>%
arrange(n) %>%
mutate(c= 0) %>%
mutate(sc = 0) %>%
mutate(GT = 0)
Nr
#the probability for unseen matches is set to the next value probability
Nr$GT[Nr$n==0] <- Nr$nn[2]*Nr$n[2]/total
Nr
Zn <- Nr[-1,] %>% add_row(n=Nr$n[nrow(Nr)]+1)
Zr <- Nr[-1,] %>% lm(log(nn)~log(n), data=.) %>% predict(newdata=Zn)
Zr <- exp(Zr)
#creates the new adjusted counts
j <- 0
for (i in 2:nrow(Nr)) {
Nr$c[i] <-  (Nr$n[i]+1)*Nr$nn[i+1]/Nr$nn[i]
Nr$c[i][is.na(Nr$c[i])] <- 0
Nr$sc[i] <-  (Nr$n[i]+1)*Zr[i]/Zr[i-1]
if(Nr$n[i+1]-Nr$n[i] > 1 | i == nrow(Nr)){
j <- 1}
Nr$GT[i] <-  Nr$c[i]*(1-j) + Nr$sc[i]*j
}
Nr
#the specific prop from words with the same count
Nr$GT[Nr$GT < 0] <- Nr$nn[2]/total
Nr$GT <- Nr$GT/sum(Nr$GT)
Nr$GT2 <- Nr$GT/Nr$nn
Nr
Zr <- Nr[-1,] %>% lm(log(nn)~log(n), data=.) %>% predict(newdata=Zn)
Zn <- Nr[-1,] %>% add_row(n=Nr$n[nrow(Nr)]+1)
Zr <- Nr[-1,] %>% lm(log(nn)~log(n), data=.) %>% predict(newdata=Zn)
Zr <- exp(Zr)
Nr[-1,] %>% lm(log(nn)~log(n), data=.)
Nr[-1,] %>% lm(log(nn)~log(n), data=.) %>% summary()
Nr[-1,] %>% lm(log(nn)~n, data=.) %>% summary()
Nr[-1,] %>% lm(nn~n, data=.) %>% summary()
Nr[-1,] %>% lm(log(nn)~log(n), data=.) %>% summary()
Nr[-1,] %>% lm(log(nn)~log(n*n), data=.) %>% summary()
Nr[-1,] %>% lm(log(nn)~log(n), data=.) %>% summary()
View(df)
df %>%
left_join(select(Nr,n,GT2), by = "n") %>%
ggplot(aes(x = bin, y = GT2)) +
geom_bar(stat = "identity")
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word")) %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin)
df$n[is.na(df$n)] <- 0
df %>%
left_join(select(Nr,n,GT2), by = "n") %>%
ggplot(aes(x = bin, y = GT2)) +
geom_bar(stat = "identity")
Nr[-1,] %>% lm(log(nn)~log(n), data=.) %>% summary()
stop_server()
stop_server()
serve_site()
Nr
Nr %>%
select(c,sc)
Nr %>%
select(c,sc) %>%
mutate(diff = c-sc)
Nr$GT2*Nr$nn
Nr %>%
select(c,sc) %>%
mutate(diff = c-sc) %>%
ggplot(aes(x=diff)) +
geom_histogram()
mean(Nr$c-Nr$sc)
%>%
Nr %>%
select(c,sc) %>%
mutate(diff = c-sc) %>%
ggplot(aes(x=diff)) +
geom_histogram()
```{r adinsight, eval=TRUE}
Nr %>%
select(c,sc) %>%
mutate(diff = c-sc) %>%
ggplot(aes(x=diff)) +
geom_histogram()
Nr
df
discount <- 0.75
df$Cdis <- df$n - discount
df$Adi <- df$Cdis/sum(df$n)
df$Adi
df
discount <- 0.75
df$Cdis <- df$n - discount
df$Adi <- df$Cdis/sum(df$n)
df
df$Adi
df$Adi[df$Adi < 0] <- 0
sum(df$Adi)
df
discount <- 0.75
ADI <- df %>%
select(word3, n) %>%
mutate(ADI = (n - discount)/sum(n))
ADI$ADI[ADI$ADI < 0 ] <- 0
unigram.prop <- ngrams$one %>%
mutate(prop = n / sum(n))
uni.wt <- 1 - sum(ADI$ADI)
ADI <- ADI %>%
add_column(uni = unigram.prop$prop*uni.wt) %>%
mutate(ADI = ADI + uni, .keep = "unused")
ADI
discount <- 0.75
discount <- 0.75
ADI <- df %>%
select(word3, n) %>%
mutate(ADI = (n - discount)/sum(n))
df
discount <- 0.75
ADI <- df %>%
ungroup() %>%
select(word3, n) %>%
mutate(ADI = (n - discount)/sum(n))
ADI
ADI$ADI[ADI$ADI < 0 ] <- 0
unigram.prop <- ngrams$one %>%
mutate(prop = n / sum(n))
uni.wt <- 1 - sum(ADI$ADI)
ADI <- ADI %>%
add_column(uni = unigram.prop$prop*uni.wt) %>%
mutate(ADI = ADI + uni, .keep = "unused")
ADI
sum(ADI$ADI < 0 )
ADI
ADI %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin) %>%
ggplot(aes(x=bin, y = ADI)) %>%
geom_bar()
ADI %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin) %>%
ggplot(aes(x=bin, y = ADI)) %>%
geom_bar(stat='idenity')
ADI %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin) %>%
ggplot(aes(x=bin, y = ADI)) +
geom_bar(stat='idenity')
ADI %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin) %>%
ggplot(aes(x = bin, y = ADI)) +
geom_bar(stat = "identity")
df
KNS <- df %>%
ungroup %>%
select(word3, n) %>%
mutate(KNS = (n - discount)/sum(n))
KNS$KNS[KNS$KNS < 0 ] <- 0
cont.wt <- 1 - sum(KNS$KNS)
KNS <- KNS %>%
add_column(cont_prop = cont.prop[nlen()][[1]]$prop*cont.wt)
cont.prop <- readRDS("cont.prop.rds")
cont.prop
library(tidyverse)
corpus = read_rds('corpus10.rds')
unigram = read_rds('unigram10.rds')
voc <- tibble(word = unique(unigram$ngram))
ngrams <- readRDS("ngrams.rds")
cont.prop <- readRDS("cont.prop.rds")
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word")) %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin)
df$n[is.na(df$n)] <- 0
df %>%
ggplot(aes(x = bin, y = n)) +
geom_bar(stat = "identity")
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word")) %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin)
df$n[is.na(df$n)] <- 1
df %>%
ggplot(aes(x = bin, y = n)) +
geom_bar(stat = "identity")
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word"))
df$n[is.na(df$n)] <- 0
Nr <- count(df, n, name = "nn")
Nr %>%
head()
total <- sum(Nr$nn*Nr$n)
total
Nr <- Nr %>%
arrange(n) %>%
mutate(c= 0) %>%
mutate(sc = 0) %>%
mutate(GT = 0)
#the probability for unseen matches is set to the next value probability
Nr$GT[Nr$n==0] <- Nr$nn[2]*Nr$n[2]/total
Zn <- Nr[-1,] %>% add_row(n=Nr$n[nrow(Nr)]+1)
Zr <- Nr[-1,] %>% lm(log(nn)~log(n), data=.) %>% predict(newdata=Zn)
Zr <- exp(Zr)
#creates the new adjusted counts
j <- 0
for (i in 2:nrow(Nr)) {
Nr$c[i] <-  (Nr$n[i]+1)*Nr$nn[i+1]/Nr$nn[i]
Nr$c[i][is.na(Nr$c[i])] <- 0
Nr$sc[i] <-  (Nr$n[i]+1)*Zr[i]/Zr[i-1]
if(Nr$n[i+1]-Nr$n[i] > 1 | i == nrow(Nr)){
j <- 1}
Nr$GT[i] <-  Nr$c[i]*(1-j) + Nr$sc[i]*j
}
#the specific prop from words with the same count
Nr$GT[Nr$GT < 0] <- Nr$nn[2]/total
Nr$GT <- Nr$GT/sum(Nr$GT)
Nr$GT2 <- Nr$GT/Nr$nn
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word")) %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin)
df$n[is.na(df$n)] <- 0
df %>%
left_join(select(Nr,n,GT2), by = "n") %>%
ggplot(aes(x = bin, y = GT2)) +
geom_bar(stat = "identity")
Nr %>%
select(c,sc) %>%
mutate(diff = c-sc) %>%
ggplot(aes(x=diff)) +
geom_histogram()
discount <- 0.75
ADI <- df %>%
ungroup() %>%
select(word3, n) %>%
mutate(ADI = (n - discount)/sum(n))
ADI$ADI[ADI$ADI < 0 ] <- 0
unigram.prop <- ngrams$one %>%
mutate(prop = n / sum(n))
uni.wt <- 1 - sum(ADI$ADI)
ADI <- ADI %>%
add_column(uni = unigram.prop$prop*uni.wt) %>%
mutate(ADI = ADI + uni, .keep = "unused")
ADI %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin) %>%
ggplot(aes(x = bin, y = ADI)) +
geom_bar(stat = "identity")
KNS <- df %>%
ungroup %>%
select(word3, n) %>%
mutate(KNS = (n - discount)/sum(n))
KNS$KNS[KNS$KNS < 0 ] <- 0
cont.wt <- 1 - sum(KNS$KNS)
cont.prop$three
cont.prop$three
cont.prop$three[[1]]
cont.prop$three
discount <- 0.75
ADI <- df %>%
ungroup() %>%
select(word3, n) %>%
mutate(ADI = (n - discount)/sum(n))
ADI$ADI[ADI$ADI < 0 ] <- 0
stop_server()
stop_server()
serve_site()
KNS
KNS <- KNS %>%
add_column(cont_prop = cont.prop$three$prop*cont.wt)
KNS
rev((3 - 1): 1)
KNS <- df %>%
ungroup %>%
select(word3, n) %>%
mutate(KNS = (n - discount)/sum(n))
KNS$KNS[KNS$KNS < 0 ] <- 0
cont.wt <- 1 - sum(KNS$KNS)
cont.prop.func <- function(word, ngrams){
out <- ngrams %>%
filter(.[,ncol(ngrams)-1] == word) %>%
nrow()
out / nrow(ngrams)
}
cont.prop <- list()
cont.prop$one <- tibble(word=voc$word, prop = ngrams$one$n/sum(ngrams$one$n))
cont.prop$two <- tibble(word=voc$word, prop = map_dbl(word, cont.prop.func, ngrams=ngrams$two))
KNS
View(KNS)
cont.prop$three <- tibble(word=voc$word, prop = map_dbl(word, cont.prop.func, ngrams=ngrams$three))
KNS
cont.prop$four <- tibble(word=voc$word, prop = map_dbl(word, cont.prop.func, ngrams=ngrams$four))
KNS <- df %>%
ungroup %>%
select(word3, n) %>%
mutate(KNS = (n - discount)/sum(n))
KNS$KNS[KNS$KNS < 0 ] <- 0
cont.wt <- 1 - sum(KNS$KNS)
KNS
KNS <- KNS %>%
mutate(KNS = KNS + cont.prop$three$prop*cont.wt, .keep = "unused")
KNS
cont.prop$three$prop*cont.wt
cont.prop$three$prop
cont.prop
library(tidyverse)
corpus = read_rds('corpus10.rds')
unigram = read_rds('unigram10.rds')
voc <- tibble(word = unique(unigram$ngram))
ngrams <- readRDS("ngrams.rds")
cont.prop <- readRDS("cont.prop.rds")
KNS
KNS <- KNS %>%
mutate(KNS = KNS + cont.prop$three$prop*cont.wt, .keep = "unused")
KNS
sum(KNS$KNS)
KNS <- df %>%
ungroup %>%
select(word3, n) %>%
mutate(KNS = (n - discount)/sum(n))
KNS$KNS[KNS$KNS < 0 ] <- 0
cont.wt <- 1 - sum(KNS$KNS)
KNS$KNS <- KNS$KNS + cont.prop$three$prop*cont.wt
sum(KNS$KNS)
KNS$KNS <- KNS$KNS + cont.prop$three$prop*cont.wt
KNS %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin) %>%
ggplot(aes(x = bin, y = KNS)) +
geom_bar(stat = "identity")
?unnest_token
?unnest_tokens
htmltools::tags$iframe(title = "Text Prediction", width = "100%", height = 500, src= "https://m2edney.shinyapps.io/Text_Predictive_Model/")
stop_server()
stop_server()
serve_site()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, eval = FALSE)
library(tidyverse)
corpus = read_rds('corpus10.rds')
unigram = read_rds('unigram10.rds')
voc <- tibble(word = unique(unigram$ngram))
ngrams <- readRDS("ngrams.rds")
cont.prop <- readRDS("cont.prop.rds")
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word")) %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin)
df$n[is.na(df$n)] <- 0
df %>%
ggplot(aes(x = bin, y = n)) +
geom_bar(stat = "identity")
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word")) %>%
mutate(bin = substr(word3,1,1)) %>%
group_by(bin)
df$n[is.na(df$n)] <- 1
df %>%
ggplot(aes(x = bin, y = n)) +
geom_bar(stat = "identity")
df <- ngrams$three %>%
filter(word1 =="what", word2 == "is") %>%
select(word3, n) %>%
right_join(voc, by = c("word3" = "word"))
df$n[is.na(df$n)] <- 0
Nr <- count(df, n, name = "nn")
Nr %>%
head()
total <- sum(Nr$nn*Nr$n)
total
