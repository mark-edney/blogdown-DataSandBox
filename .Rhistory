library(gt)
# Data is loaded into the shiny app from the previously generated RDS file
data = readRDS('data.rds')
# Summary data is created from the loaded data and saved as data2
data2 <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE))
# For regional information for mapping, the rgdal library is used.
library(rgdal)
# The following code will download a regional outlines for maps if the file doesn't exist on the system
if (!file.exists("./src/ref/ne_50m_admin_1_states_provinces_lakes/ne_50m_admin_1_states_provinces_lakes.dbf")){
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip'),
f <- tempfile())
unzip(f, exdir = "./src/ref/ne_50m_admin_1_states_provinces_lakes")
rm(f)
}
# The regional data is then loaded into R and some data is edited to make it more inline with the regional data
region <- readOGR("./src/ref/ne_50m_admin_1_states_provinces_lakes", 'ne_50m_admin_1_states_provinces_lakes', encoding='UTF-8', verbose = FALSE
)
data2$Province <- c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Ontario", "Prince Edward Island", "QuÃ©bec", "Saskatchewan")
?%>%
%>%
bar_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = Province, y = Donations, fill = Province)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90), legend.position='none')
# This call was added for illustration
bar_plot
edu_plot <- data %>%
group_by(Education) %>%
rename(Donations = VALUE) %>%
ggplot(aes(y= Donations, x = Education, fill = Education)) +
geom_boxplot() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# This call was added for illustration
edu_plot
pie_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = '', y = Donations, fill = Province)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void()
# This call was added for illustration
pie_plot
# Loading the libraries
library(shiny)
library(shinydashboard)
library(plotly)
library(leaflet)
library(rgdal)
library(gt)
# Data is loaded into the shiny app from the previously generated RDS file
data = readRDS('data.rds')
# Summary data is created from the loaded data and saved as data2
data2 <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE))
# For regional information for mapping, the rgdal library is used.
library(rgdal)
# The following code will download a regional outlines for maps if the file doesn't exist on the system
if (!file.exists("./src/ref/ne_50m_admin_1_states_provinces_lakes/ne_50m_admin_1_states_provinces_lakes.dbf")){
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip'),
f <- tempfile())
unzip(f, exdir = "./src/ref/ne_50m_admin_1_states_provinces_lakes")
rm(f)
}
# The regional data is then loaded into R and some data is edited to make it more inline with the regional data
region <- readOGR("./src/ref/ne_50m_admin_1_states_provinces_lakes", 'ne_50m_admin_1_states_provinces_lakes', encoding='UTF-8', verbose = FALSE
)
data2$Province <- c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Ontario", "Prince Edward Island", "QuÃ©bec", "Saskatchewan")
bar_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = Province, y = Donations, fill = Province)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90), legend.position='none')
# This call was added for illustration
bar_plot
edu_plot <- data %>%
group_by(Education) %>%
rename(Donations = VALUE) %>%
ggplot(aes(y= Donations, x = Education, fill = Education)) +
geom_boxplot() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# This call was added for illustration
edu_plot
pie_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = '', y = Donations, fill = Province)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void()
# This call was added for illustration
pie_plot
blogdown::stop_server()
library(blogdown)
serve_site()
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
stop_server()
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
blogdown:::preview_site()
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
stop_server()
rsconnect::showLogs()
install.packages(c("blob", "blogdown", "bookdown", "broom", "caret", "cli", "clipr", "colorspace", "commonmark", "crayon", "desc", "dlstats", "fansi", "gert", "glue", "haven", "jsonlite", "knitr", "leaflet", "magrittr", "opendatatoronto", "parallelly", "plyr", "processx", "RColorBrewer", "Rcpp", "readxl", "reshape", "rgdal", "rlang", "rmarkdown", "rprojroot", "sass", "scales", "sf", "sp", "stargazer", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "waldo", "withr", "xfun", "yaml"))
install.packages(c("blob", "blogdown", "bookdown", "broom", "caret", "cli", "clipr", "colorspace", "commonmark", "crayon", "desc", "dlstats", "fansi", "gert", "glue", "haven", "jsonlite", "knitr", "leaflet", "magrittr", "opendatatoronto", "parallelly", "plyr", "processx", "RColorBrewer", "Rcpp", "readxl", "reshape", "rgdal", "rlang", "rmarkdown", "rprojroot", "sass", "scales", "sf", "sp", "stargazer", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "waldo", "withr", "xfun", "yaml"))
install.packages(c("blob", "blogdown", "bookdown", "broom", "caret", "cli", "clipr", "colorspace", "commonmark", "crayon", "desc", "dlstats", "fansi", "gert", "glue", "haven", "jsonlite", "knitr", "leaflet", "magrittr", "opendatatoronto", "parallelly", "plyr", "processx", "RColorBrewer", "Rcpp", "readxl", "reshape", "rgdal", "rlang", "rmarkdown", "rprojroot", "sass", "scales", "sf", "sp", "stargazer", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "waldo", "withr", "xfun", "yaml"))
install.packages(c("blob", "blogdown", "bookdown", "broom", "caret", "cli", "clipr", "colorspace", "commonmark", "crayon", "desc", "dlstats", "fansi", "gert", "glue", "haven", "jsonlite", "knitr", "leaflet", "magrittr", "opendatatoronto", "parallelly", "plyr", "processx", "RColorBrewer", "Rcpp", "readxl", "reshape", "rgdal", "rlang", "rmarkdown", "rprojroot", "sass", "scales", "sf", "sp", "stargazer", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "waldo", "withr", "xfun", "yaml"))
install.packages(c("caret", "cli", "colorspace", "fansi", "glue", "magrittr", "rgdal", "rlang", "sp", "uuid", "vctrs", "xfun", "yaml"))
install.packages(c("caret", "cli", "colorspace", "fansi", "glue", "magrittr", "rgdal", "rlang", "sp", "uuid", "vctrs", "xfun", "yaml"))
library(shiny); runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
setwd("~/R/blogdown-DataSandBox/content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo")
runApp('shinydashboard.R')
runApp('shinydashboard.R')
runApp('shinydashboard.R')
blogdown:::preview_site()
blogdown:::preview_site()
library(blogdown)
serve_site()
stop_server()
stop_server()
serve_site()
# Loading the libraries
library(shiny)
library(shinydashboard)
library(plotly)
library(tidyverse)
library(leaflet)
library(rgdal)
library(gt)
# Data is loaded into the shiny app from the previously generated RDS file
data = readRDS('data.rds')
# Summary data is created from the loaded data and saved as data2
data2 <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE))
# For regional information for mapping, the rgdal library is used.
library(rgdal)
# The following code will download a regional outlines for maps if the file doesn't exist on the system
if (!file.exists("./src/ref/ne_50m_admin_1_states_provinces_lakes/ne_50m_admin_1_states_provinces_lakes.dbf")){
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip'),
f <- tempfile())
unzip(f, exdir = "./src/ref/ne_50m_admin_1_states_provinces_lakes")
rm(f)
}
# The regional data is then loaded into R and some data is edited to make it more inline with the regional data
region <- readOGR("./src/ref/ne_50m_admin_1_states_provinces_lakes", 'ne_50m_admin_1_states_provinces_lakes', encoding='UTF-8', verbose = FALSE
)
data2$Province <- c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Ontario", "Prince Edward Island", "QuÃ©bec", "Saskatchewan")
bar_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = Province, y = Donations, fill = Province)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90), legend.position='none')
# This call was added for illustration
bar_plot
edu_plot <- data %>%
group_by(Education) %>%
rename(Donations = VALUE) %>%
ggplot(aes(y= Donations, x = Education, fill = Education)) +
geom_boxplot() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# This call was added for illustration
edu_plot
pie_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = '', y = Donations, fill = Province)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void()
# This call was added for illustration
pie_plot
map_leaf <- leaflet() %>%
addTiles() %>%
setView(-74.09, 45.7,  zoom = 2) %>%
addPolygons(data = subset(region, name %in% data2$Province), color = "#444444", opacity = 1.0, fillOpacity = 0.75,
fillColor = ~colorQuantile("Greens", data2$Donations)(data2$Donations),
weight = 1)
# This call was added for illustration
map_leaf
gt_table <- data2 %>%
pivot_wider(names_from = Province, values_from = Donations) %>%
gt()
# This call was added for illustration
gt_table
print(gt_table)
blogdown:::preview_site()
download.file(file.path('https://www.naturalearthdata.com/http/'
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip')
download.file(file.path('https://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip'),
f <- tempfile())
download.file(file.path('https://www.naturalearthdata.com/https/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip'),
f <- tempfile())
download.file(file.path('https://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip'),
f <- tempfile())
blogdown:::preview_site()
blogdown::serve_site()
stop_serve
blogdown::stop_server()
blogdown:::preview_site()
icon(home)
icon('home')
?iconv
?icon
blogdown:::preview_site()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, eval = FALSE)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9', 'N10'), 'Counts' = c(100,75,40,30,35,20,15,8,4,2))
View(df)
library(ggplot2)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9', 'N10'), 'Counts' = c(100,75,40,30,35,20,15,8,4,2))
library(ggplot2)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9', 'N10'), 'Counts' = c(100,75,40,30,35,20,15,8,4,2))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'idenity')
library(tidyverse)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9', 'N10'), 'Counts' = c(100,75,40,30,35,20,15,8,4,2))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'idenity')
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
g
library(tidyverse)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9'), 'Counts' = c(100,75,40,30,35,20,15,8,4))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
g
library(tidyverse)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9'), 'Counts' = c(100,50,42,30,15,10,4,0,1))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
g
library(tidyverse)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9'), 'Counts' = c(100,50,42,30,15,10,4,0,1))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
g
plot(g)
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
plot(g)
plot(g)
plot(g)
0:9
1:9
mdl <- lm(log(df$Counts)~log(1:9))
mdl
lm(log(df$Counts)~log(1:9))
lm(df$Counts~(1:9))
df$Counts
length(df$Counts)
length(1:9)
lm(df$Counts~(1:9))
lm(df$Counts~(df$Counts))
lm(df$Counts~(1:9))
lm(log(df$Counts)~log(1:9)) %>% predict(newdata=Zn)
log(df$Counts)
log(0)
df2 <- data.frame('y' = log(df$Counts), 'x' = log(1:9))
mdl <- lm(log(df$Counts)~log(1:9))
df2 <- data.frame('y' = log(df$Counts), 'x' = log(1:9))
df2 <- df2[is.finite(df2)]
df2 <- data.frame('y' = log(df$Counts), 'x' = log(1:9))
df2 <- df2[is.finite(df2$y),]
mdl <- lm(log(df$Counts)~log(1:9))
df2 <- data.frame('y' = log(df$Counts), 'x' = log(1:9))
df2 <- df2[is.finite(df2$y),]
mdl <- lm(y~x, data = df2)
g + geom_smooth()
plot(g + geom_smooth())
plot(g + geom_smooth())
?geom_smooth
g + geom_smooth(formula = log(y)~log(x))
g + geom_smooth(formula = log(y)~log(x))
g + geom_smooth(formula = log(y)~log(x), method = 'glm')
g + geom_smooth(formula = log(Counts)~log(Frequency), method = 'glm')
g + geom_smooth(formula = log(Counts)~log(Frequency), method = 'glm')
g + geom_smooth()
g + geom_smooth(Counts~Frequency)
g + geom_smooth(df$Counts~df$Frequency)
g + geom_smooth(y~x)
g + geom_smooth()
g + geom_smooth()
g + geom_smooth(y~x)
g + geom_smooth(formula = y~x)
g + geom_smooth(formula = df$Counts~ df$Frequency)
g + geom_smooth(formula = df$Counts~ df$Frequency, method = 'lm')
g + geom_smooth(formula = df$Counts~ df$Frequency, method = 'glm')
g + stat_smooth()
g + stat_smooth()
g + geom_point()
g + geom_point() + geom_smooth()
ggplot(aes(x = Frequency, y= Counts)) +
geom_smooth()
ggplot(aes(x = Frequency, y= Counts))
ggplot(aes(x = df$Frequency, y= df$Counts))
ggplot(aes(x = df$Frequency, y= df$Counts)) + geom_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_smooth(stat = 'identity')
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point() + geom_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point() + stat_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point() + stat_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point() + geom_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point(stat = 'identity') + geom_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point(stat = 'identity', position = 'identity') + geom_smooth()
ggplot(aes(y = df$Counts, x = 0:9))
ggplot(aes(y = df$Counts, x = 0:9)) + geom_point()
df2
ggplot(aes(x = Frequency, y= Counts), data = df2) + geom_smooth()
df2
ggplot(aes(x = x, y= y), data = df2) + geom_smooth()
ggplot(aes(x = exp(x), y= exp(y)), data = df2) + geom_smooth()
ggplot(aes(x = exp(x), y= exp(y)), data = df2) + geom_smooth(method = glm, formula = y~x)
df <- data.frame('Frequency' = 1:9, 'Counts' = c(100,50,42,30,15,10,4,0,1))
library(tidyverse)
df <- data.frame('Frequency' = 1:9, 'Counts' = c(100,50,42,30,15,10,4,0,1))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
library(tidyverse)
df <- data.frame('Frequency' = 1:9, 'Counts' = c(100,50,42,30,15,10,4,0,1))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
plot(g)
g + geom_smooth()
g + geom_smooth(formula = log(y)~log(x))
g + geom_smooth(formula = log(y)~log(x), data = df[is.finite(log(df$Frequency))])
df[is.finite(log(df$Frequency))]
log(df$Frequency)
df
log(df$Counts)
is.finite(log(df$Counts))
df[is.finite(log(df$Counts)),]
g + stat_smooth()
g + geom_smooth(formula = log(y)~log(x), data = df[is.finite(log(df$Counts)),])
g + geom_smooth(formula = y~x, data = df[is.finite(log(df$Counts)),])
library(tidyverse)
df <- data.frame('Frequency' = 1:9, 'Counts' = c(100,50,42,30,15,10,4,0,1))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
plot(g)
g + geom_smooth(formula = y~x, data = df[is.finite(log(df$Counts)),])
library(tidyverse)
df <- data.frame('Counts' = 1:9, 'Frequency' = c(100,50,42,30,15,10,4,0,1))
g <- df %>%
ggplot(aes(x = Counts, y= Frequency)) +
geom_bar(stat = 'identity')
plot(g)
g + geom_smooth(formula = y~x, data = df[is.finite(log(df$Counts)),])
g + geom_smooth(formula = y~x, data = df[is.finite(log(df$Frequency)),])
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)))
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency))
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency))])
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
predict(mdl)
c(0,df$Counts)
df$Frequency
df$Frequency[0]/sum(df$Frequency)
sum(df$Frequency)
df$Frequency[1]/sum(df$Frequency)
df$Frequency
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
c <- c(0,df$Counts)
cstar <- (c+1)/df$Frequency
c
c+1
(c+1)*df$Frequency
(c+1)*(c(0,df$Frequency))
(df$Counts+1)/df$Frequency
c
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
c <- c(df$Counts)
cstar <- (df$Counts+1)/df$Frequency
c
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
c <- df$Counts
nc <- df$Frequency
nc
nc[nc==0]
nc[nc==0]
df
df[df$Frequency==0,]
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
for (i in df$Counts){
if(df$Frequency[i]==0){
df$Frequency[i] = exp(predict(mdl, newdata = log(i)))
}
}
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
for (i in df$Counts){
if(df$Frequency[i]==0){
df$Frequency[i] = exp(predict(mdl, newdata = log(df$Counts[i])))
}
}
print(df$Counts[i])
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
for (i in df$Counts){
print(df$Counts[i])
}
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
for (i in df$Counts){
if(df$Frequency[i]==0){
print(df$Counts[i])}
}
mdl
mdl
predict(mdl, log(8))
predict(mdl, newdata = log(8))
predict(mdl, newdata = list(log(8)))
predict(mdl, newdata = log(df$Counts))
predict.lm(mdl, newdata = log(df$Counts))
predict(mdl, newdata = log(df$Counts))
predict(mdl, newdata = df)
exp(predict(mdl, newdata = df))
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
cpred <- exp(predict(mdl, newdata = df))
for (i in df$Counts){
if(df$Frequency[i]==0){
df$Frequency[i] <- cpred[i]}
}
df
df[2:,]
df[2:]
df[]
df[1,]
df[1:,]
df[-1,]
df2 <- cbind(df[-1,], c(10,0))
df2
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
cpred <- exp(predict(mdl, newdata = df))
for (i in df$Counts){
if(df$Frequency[i]==0){
df$Frequency[i] <- cpred[i]}
}
df2 <- rbind(df[-1,], c(10,0))
df2
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
cpred <- exp(predict(mdl, newdata = df))
for (i in df$Counts){
if(df$Frequency[i]==0){
df$Frequency[i] <- cpred[i]}
}
df2 <- rbind(df[-1,], c(10,0))
cpred2 <- exp(predict(mdl, newdata = df2))
for (i in df2$Counts){
if(df2$Frequency[i]==0){
df2$Frequency[i] <- cpred2[i]}
}
df2
df2 <- data.frame('Count c' = 0:9, 'Good Turing c*' = c(0.0000270, 0.446, 1.26, 2.24, 3.24, 4.22, 4.19, 6.21, 7.24, 8.25))
df2
library(gt)
data.frame('Count c' = 0:9, 'Good Turing c*' = c(0.0000270, 0.446, 1.26, 2.24, 3.24, 4.22, 4.19, 6.21, 7.24, 8.25)) %>% gt()
library(gt)
data.frame('Count c' = 0:9, 'Good Turing c*' = c(0.00270, 0.446, 1.26, 2.24, 3.24, 4.22, 4.19, 6.21, 7.24, 8.25)) %>% gt()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
