rmarkdown::knitr_options()
knitr::read_chunk()
knitr::knit_params()
?knitr::knit_params
library(blogdown)
serve_site()
stop_server()
stop_server()
serve_site()
library(tidyverse)
library(data.table)
library(microbenchmark)
library(farff)
df <- farff::readARFF('dataset_31_credit-g.arff')
dt <- setDT(df)
ti <- tibble(df)
group <- microbenchmark(Data_Frame = df %>%
group_by(class) %>%
summarise(avg = mean(age)),
Data_Table = dt[,.(avg = mean(age)), by = class],
Tibble = ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
print(group)
avg = summary(group)$mean
groupdiff <- mean((avg[2]-avg[1])/avg[1], (avg[2]-avg[3])/avg[3])*100
counts <- microbenchmark(Data_Frame = df %>%
filter(credit_amount > 5000, age <35) %>%
nrow(),
Data_Table = dt[credit_amount > 5000 & age < 35, .N ,],
Tibble = ti %>%
filter(credit_amount > 5000, age <35) %>%
nrow())
print(counts)
avg = summary(counts)$mean
countdiff <- mean((avg[2]-avg[1])/avg[1], (avg[2]-avg[3])/avg[3])*100
new <- microbenchmark(Data_Frame = df %>% mutate(property = paste(property_magnitude, housing)),
Data_Table = dt[,property := paste(property_magnitude, housing)],
Tibble = ti %>% mutate(property = paste(property_magnitude, housing)))
print(new)
avg = summary(new)$mean
newdiff <- mean((avg[2]-avg[1])/avg[1], (avg[2]-avg[3])/avg[3])*100
total
total <- round(mean(groupdiff, countdiff, newdiff))
total <- round(mean(groupdiff, countdiff, newdiff))
total
View(dt)
dt[credit_amount > 199,,by = .(purpose, class)]
dt[credit_amount > 100,,by = .(purpose, class)]
dt[credit_amount > 1000,,by = .(purpose, class)]
dt[credit_amount > 1000,,by = .(purpose, class)][,N., by = personal_status]
dt[credit_amount > 1000,,by = .(purpose, class)][,.N, by = personal_status]
View(df)
dt[credit_amount > 1000,mean(age),by = .(purpose, class)]
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][class = 'good']
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][class = 'good',]
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][class = 'good',.N]
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][.(class = 'good'),.N]
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][.(class == 'good'),.N]
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][class == 'good',.N]
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][class == 'good',.N, by = purpose]
dt[credit_amount > 1000, age = mean(age),by = .(purpose, class)][class == 'good',age = mean(age), by = purpose]
dt[credit_amount > 1000, age = mean(age),by = .(purpose, class)]
dt[credit_amount > 1000, age := mean(age),by = .(purpose, class)]
dt[credit_amount > 1000, age := mean(age),by = .(purpose, class)]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][class==good,]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][class == 'good',]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][class == 'good']
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][class == 'good']
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == 'good' && age < mean(age))]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == 'good' & age < mean(age))]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(age < mean(age))]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][age < mean(age)]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(age < mean(age))]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == 'good')]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == 'good')]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == 'good'),]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == 'good'),,]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][class == "good"]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == "good")]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][class == "good" & age < mean(age)]
stop_server()
stop_server()
serve_site()
reticulate::repl_python()
from svglib.svglib import svg2rlg
reticulate::repl_python()
from svglib.svglib import svg2rlg
from reportlab.graphics import renderPDF, renderPM
img = svg2rlf("Rlogo.svg")
renderPM.drawToFile(img, "file.png", fmt="PNG")
img = svg2rlg("Rlogo.svg")
from svglib.svglib import svg2rlg
from reportlab.graphics import renderPDF, renderPM
img = svg2rlg("Rlogo.svg")
renderPM.drawToFile(img, "file.png", fmt="PNG")
renderPDF.drawToFile(img, "file.pdf")
```{python intro}
from svglib.svglib import svg2rlg
from reportlab.graphics import renderPDF, renderPM
img = svg2rlg("Rlogo.svg")
renderPM.drawToFile(img, "file.png", fmt="PNG")
renderPDF.drawToFile(img, "file.pdf")
img = svg2rlg("gt_parts_of_a_table.svg")
renderPM.drawToFile(img, "file.png", fmt="PNG")
renderPDF.drawToFile(img, "file.pdf")
quit
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, eval = FALSE)
blogdown:::new_post_addin()
reticulate::repl_python()
import PyPDF2, os
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfWriter.write('merged.pdf')
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfWriter.write('merged.pdf')
pdfiles
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf') and not 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfWriter.write('merged.pdf')
pdfiles
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf') and filename not = 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfWriter.write('merged.pdf')
pdfiles
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
if filename != 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfWriter.write('merged.pdf')
pdfiles
pdfWriter
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
if filename != 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfWriter.write('merged.pdf')
pdfWriter
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
if filename != 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger()
pdfWriter.merge(pdfiles)
pdfWriter.write('merged.pdf')
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
if filename != 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger()
pdfWriter.append(pdfiles)
pdfWriter.write('merged.pdf')
import PyPDF2, os
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
if filename != 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfMerge = PyPDF2.PdfFileMerger()
for filename in pdfiles:
pdfFile = open(filename, 'rb')
pdfReader = PyPDF2.PdfFileReader(pdfFile)
pdfMerge.append(pdfReader)
pdfMerge.write('merged.pdf')
?pdfMerge
pdfMerge = PyPDF2.PdfFileMerger()
for filename in pdfiles:
pdfFile = open(filename, 'rb')
pdfReader = PyPDF2.PdfFileReader(pdfFile)
pdfFile.close()
pdfMerge.append(pdfReader)
pdfMerge.write('merged.pdf')
pdfMerge = PyPDF2.PdfFileMerger()
for filename in pdfiles:
pdfFile = open(filename, 'rb')
pdfReader = PyPDF2.PdfFileReader(pdfFile)
pdfMerge.append(pdfReader)
pdfFile.close()
pdfMerge.write('merged.pdf')
blogdown:::preview_site()
quit
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, eval = FALSE)
blogdown::serve_site()
blogdown:::preview_site()
library(shiny); runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
?box
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
library(shiny); runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
?renderPlotly
runApp('~/R/Semantic Dashboard/shinydashboard.R')
data = readRDS('data.rds')
data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = Province, y = Donations, fill = Province)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90), legend.position='none') %>%
ggplotly()
?ggplotly
data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = Province, y = Donations, fill = Province)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90), legend.position='none')
p <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = Province, y = Donations, fill = Province)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90), legend.position='none')
ggplotly(p)
?renderPlotly
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
?geom_boxplot()
?theme
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
?ggplotly
p
edu_plot <- data %>%
group_by(Education) %>%
rename(Donations = VALUE) %>%
ggplot(aes(y= Donations, x = Education, fill = Education)) +
geom_boxplot() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
legend.position = "none")
ggplotly(edu_plot)
ggplotly(edu_plot, tooltip = "y")
ggplotly(edu_plot, tooltip = "none")
ggplotly(edu_plot, tooltip = "colour")
ggplotly(edu_plot, tooltip = "fill")
edu_plot <- data %>%
group_by(Education) %>%
rename(Donations = VALUE) %>%
ggplot(aes(y= Donations, x = Education, fill = Education)) +
geom_boxplot() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplotly(edu_plot, tooltip = "fill")
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
?fluidRow
runApp('~/R/Semantic Dashboard/shinydashboard.R')
?box
runApp('~/R/Semantic Dashboard/shinydashboard.R')
library(shiny); runApp('~/R/Semantic Dashboard/shinydashboard.R')
library(gt)
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
runApp('~/R/Semantic Dashboard/shinydashboard.R')
blogdown:::new_post_addin()
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
blogdown:::preview_site()
bar_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = Province, y = Donations, fill = Province)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90), legend.position='none')
# This call was added for illistration
bar_plot
bar_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = Province, y = Donations, fill = Province)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90), legend.position='none')
bar_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = Province, y = Donations, fill = Province)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90), legend.position='none')
# Data is loaded into the shiny app from the previously generated RDS file
data = readRDS('data.rds')
bar_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = Province, y = Donations, fill = Province)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90), legend.position='none')
data = readRDS('data.rds')
data2 <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE))
library(rgdal)
if (!file.exists("./src/ref/ne_50m_admin_1_states_provinces_lakes/ne_50m_admin_1_states_provinces_lakes.dbf")){
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip'),
f <- tempfile())
unzip(f, exdir = "./src/ref/ne_50m_admin_1_states_provinces_lakes")
rm(f)
}
region <- readOGR("./src/ref/ne_50m_admin_1_states_provinces_lakes", 'ne_50m_admin_1_states_provinces_lakes', encoding='UTF-8')
data2$Province <- c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Ontario", "Prince Edward Island", "QuÃ©bec", "Saskatchewan")
bar_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = Province, y = Donations, fill = Province)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90), legend.position='none')
# This call was added for illistration
bar_plot
# Loading the libraries
library(shiny)
library(shinydashboard)
library(tidyverse)
library(plotly)
library(leaflet)
library(rgdal)
library(gt)
# Data is loaded into the shiny app from the previously generated RDS file
data = readRDS('data.rds')
# Summary data is created from the loaded data and saved as data2
data2 <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE))
# For regional information for mapping, the rgdal library is used.
library(rgdal)
# The following code will download a regional outlines for maps if the file doesn't exist on the system
if (!file.exists("./src/ref/ne_50m_admin_1_states_provinces_lakes/ne_50m_admin_1_states_provinces_lakes.dbf")){
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip'),
f <- tempfile())
unzip(f, exdir = "./src/ref/ne_50m_admin_1_states_provinces_lakes")
rm(f)
}
# The regional data is then loaded into R and some data is edited to make it more inline with the regional data
region <- readOGR("./src/ref/ne_50m_admin_1_states_provinces_lakes", 'ne_50m_admin_1_states_provinces_lakes', encoding='UTF-8', verbose = FALSE
)
data2$Province <- c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Ontario", "Prince Edward Island", "QuÃ©bec", "Saskatchewan")
?%>%
%>%
bar_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = Province, y = Donations, fill = Province)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90), legend.position='none')
# This call was added for illustration
bar_plot
edu_plot <- data %>%
group_by(Education) %>%
rename(Donations = VALUE) %>%
ggplot(aes(y= Donations, x = Education, fill = Education)) +
geom_boxplot() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# This call was added for illustration
edu_plot
pie_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = '', y = Donations, fill = Province)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void()
# This call was added for illustration
pie_plot
# Loading the libraries
library(shiny)
library(shinydashboard)
library(plotly)
library(leaflet)
library(rgdal)
library(gt)
# Data is loaded into the shiny app from the previously generated RDS file
data = readRDS('data.rds')
# Summary data is created from the loaded data and saved as data2
data2 <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE))
# For regional information for mapping, the rgdal library is used.
library(rgdal)
# The following code will download a regional outlines for maps if the file doesn't exist on the system
if (!file.exists("./src/ref/ne_50m_admin_1_states_provinces_lakes/ne_50m_admin_1_states_provinces_lakes.dbf")){
download.file(file.path('http://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip'),
f <- tempfile())
unzip(f, exdir = "./src/ref/ne_50m_admin_1_states_provinces_lakes")
rm(f)
}
# The regional data is then loaded into R and some data is edited to make it more inline with the regional data
region <- readOGR("./src/ref/ne_50m_admin_1_states_provinces_lakes", 'ne_50m_admin_1_states_provinces_lakes', encoding='UTF-8', verbose = FALSE
)
data2$Province <- c("Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Nova Scotia", "Ontario", "Prince Edward Island", "QuÃ©bec", "Saskatchewan")
bar_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = Province, y = Donations, fill = Province)) +
geom_bar(stat = "identity", show.legend = FALSE) +
theme(axis.text.x = element_text(angle = 90), legend.position='none')
# This call was added for illustration
bar_plot
edu_plot <- data %>%
group_by(Education) %>%
rename(Donations = VALUE) %>%
ggplot(aes(y= Donations, x = Education, fill = Education)) +
geom_boxplot() +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
# This call was added for illustration
edu_plot
pie_plot <- data %>%
group_by(Province) %>%
summarise(Donations = sum(VALUE)) %>%
ggplot(aes(x = '', y = Donations, fill = Province)) +
geom_bar(stat = "identity", width = 1) +
coord_polar("y", start = 0) +
theme_void()
# This call was added for illustration
pie_plot
blogdown::stop_server()
library(blogdown)
serve_site()
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
stop_server()
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
blogdown:::preview_site()
runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
stop_server()
rsconnect::showLogs()
install.packages(c("blob", "blogdown", "bookdown", "broom", "caret", "cli", "clipr", "colorspace", "commonmark", "crayon", "desc", "dlstats", "fansi", "gert", "glue", "haven", "jsonlite", "knitr", "leaflet", "magrittr", "opendatatoronto", "parallelly", "plyr", "processx", "RColorBrewer", "Rcpp", "readxl", "reshape", "rgdal", "rlang", "rmarkdown", "rprojroot", "sass", "scales", "sf", "sp", "stargazer", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "waldo", "withr", "xfun", "yaml"))
install.packages(c("blob", "blogdown", "bookdown", "broom", "caret", "cli", "clipr", "colorspace", "commonmark", "crayon", "desc", "dlstats", "fansi", "gert", "glue", "haven", "jsonlite", "knitr", "leaflet", "magrittr", "opendatatoronto", "parallelly", "plyr", "processx", "RColorBrewer", "Rcpp", "readxl", "reshape", "rgdal", "rlang", "rmarkdown", "rprojroot", "sass", "scales", "sf", "sp", "stargazer", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "waldo", "withr", "xfun", "yaml"))
install.packages(c("blob", "blogdown", "bookdown", "broom", "caret", "cli", "clipr", "colorspace", "commonmark", "crayon", "desc", "dlstats", "fansi", "gert", "glue", "haven", "jsonlite", "knitr", "leaflet", "magrittr", "opendatatoronto", "parallelly", "plyr", "processx", "RColorBrewer", "Rcpp", "readxl", "reshape", "rgdal", "rlang", "rmarkdown", "rprojroot", "sass", "scales", "sf", "sp", "stargazer", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "waldo", "withr", "xfun", "yaml"))
install.packages(c("blob", "blogdown", "bookdown", "broom", "caret", "cli", "clipr", "colorspace", "commonmark", "crayon", "desc", "dlstats", "fansi", "gert", "glue", "haven", "jsonlite", "knitr", "leaflet", "magrittr", "opendatatoronto", "parallelly", "plyr", "processx", "RColorBrewer", "Rcpp", "readxl", "reshape", "rgdal", "rlang", "rmarkdown", "rprojroot", "sass", "scales", "sf", "sp", "stargazer", "testthat", "tidyselect", "tinytex", "tzdb", "uuid", "vctrs", "waldo", "withr", "xfun", "yaml"))
install.packages(c("caret", "cli", "colorspace", "fansi", "glue", "magrittr", "rgdal", "rlang", "sp", "uuid", "vctrs", "xfun", "yaml"))
install.packages(c("caret", "cli", "colorspace", "fansi", "glue", "magrittr", "rgdal", "rlang", "sp", "uuid", "vctrs", "xfun", "yaml"))
library(shiny); runApp('content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo/shinydashboard.R')
setwd("~/R/blogdown-DataSandBox/content/post/2022-04-20-dashboards-in-r-with-shiny-dashboard/Demo")
runApp('shinydashboard.R')
runApp('shinydashboard.R')
runApp('shinydashboard.R')
blogdown:::preview_site()
