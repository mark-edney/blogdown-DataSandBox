blogdown:::new_post_addin()
blogdown:::new_post_addin()
setwd("~/R/blogdown-DataSandBox")
blogdown:::new_post_addin()
library(blogdown)
blogdown:::new_post_addin()
wd()
setwd("~/R/blogdown-DataSandBox")
new_post()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
blogdown:::new_post_addin()
blogdown:::preview_site()
library(blogdown)
serve_site()
install.packages("stargazer")
?stargazer
library(stargazer)
?data
data()
data(sleep)
data <- data(sleep)
data <- data("sleep")
data("sleep")
force(sleep)
force(sleep)
data <- data(sleep)
data <- data(sleep)
View(data)
data <- data("sleep"
)
)
data <- data("sleep")
View(data)
force(sleep)
data(BOD)
data = data(BOD)
data = data("BOD")
data("BOD")
force(BOD)
View(BOD)
data("CO2")
force(CO2)
library(tidyverse)
CO2 %>% lm(.$con~.$uptake)
lm(CO2$conc~CO2$uptake)
lm(CO2$conc~CO2$Plant)
?CO2
lm(CO2$conc~CO2$Plant) %>% stargazer()
CO2 %>% lm(.$con~.$uptake,.)
CO2 %>% lm(.$con~.$plante,.)
CO2 %>% lm(.$con~.$plant,.)
CO2 %>% lm(.$con~.$Plant,.) %>% stargazer()
```{R, Example}
data("CO2")
lm(CO2$conc, CO2$Plant)
data("CO2")
lm(CO2$conc, CO2$Plant)
lm(CO2$conc ~CO2$Plant)
table(lm(CO2$conc ~CO2$Plant))
lm(CO2$conc ~CO2$Plant)
library(blogdown)
serve_site()
library(blogdown)
serve_site()
serve_site()
stop_server()
serve_site()
serve_site()
hugo_build()
hugo_version()
hugo
hugo_installers()
install.packages("installr")
library(installr)
updateR()
library(blogdown)
install.packages("blogdown")
library(blogdown)
serve_site()
library(blogdown)
install.packages("installr")
library(installr)
library(blogdown)
serve_site()
library(blogdown)
serve_site()
blogdown:::preview_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
library(blogdown)
serve_site()
stop_server()
blogdown:::preview_site()
install.packages("stargazer")
?stargazer
data("CO2")
lm(CO2$conc ~CO2$Plant)
library(stargazer)
lm(CO2$conc ~CO2$Plant) %>%
stargazer()
library(tidyverse)
library(stargazer)
lm(CO2$conc ~CO2$Plant) %>%
stargazer()
data("CO2")
mdl <- lm(CO2$conc ~CO2$Plant)
install.packages("stargazer")
library(stargazer)
stargazer(mdl)
install.packages("stargazer")
library(blogdown)
serve_site()
install.packages("stargazer")
library(stargazer)
table <- stargazer(mdl)
```{=latex}
table
```
library(blogdown)
blogdown:::new_post_addin()
serve_site()
table <- stargazer(data)
mdl <- lm(CO2$conc ~CO2$Plant)
data("CO2")
mdl <- lm(CO2$conc ~CO2$Plant)
data("CO2")
mdl <- lm(CO2$conc ~CO2$Plant)
install.packages("stargazer")
library(stargazer)
table <- stargazer(data)
install.packages("stargazer")
library(stargazer)
table <- stargazer(mdl)
install.packages("stargazer")
```{=latex}
table
```
library()
```{=latex}
table
```
library(stargazer)
stargazer(mdl)
stargazer(CO2)
blogdown:::new_post_addin()
install.packages("stargazer")
library(stargazer)
stargazer(mdl, header=FALSE, type='latex')
stargazer(CO2)
install.packages("stargazer")
library(blogdown)
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
setwd("~/R/blogdown-DataSandBox")
blogdown:::new_post_addin()
blogdown:::new_post_addin()
library(blogdown)
serve_site()
blogdown:::new_post_addin()
blogdown::serve_site(.site_dir = "site")
blogdown::stop_server()
library(blogdown)
setwd("~/R/blogdown-DataSandBox")
getwd()
library(blogdown)
serve_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
?co2
?CO2
data
data("CO2")
force(CO2)
force(CO2)
lm(CO2$uptake~CO2$conc)
lm(CO2$uptake~CO2$plant)
lm(CO2$uptake~CO2$Plant)
stargazer(mdl)
library(stargazer)
stargazer(mdl)
data(co2)
mdl  <- lm(CO2$uptake~CO2$Plant)
mdl
library(stargazer)
stargazer(mdl)
data(co2)
mdl  <- lm(CO2$uptake~CO2$Plant)
mdl
library(stargazer)
stargazer(mdl)
library(stargazer)
stargazer(mdl, title = "CO2 Uptake of plants model")
stargazer(CO2)
?stargazer
stargazer(mdl, title = "CO2 Uptake of plants model", type = 'html')
blogdown:::insert_image_addin()
blogdown:::insert_image_addin()
?glm
library(stargazer)
mdl2 <- glm(CO2$uptake ~ CO2$Plant)
stargazer(mdl, mdl2,  title = "CO2 Uptake of plants model")
stargazer(CO2)
library(stargazer)
mdl2 <- glm(CO2$uptake ~ CO2$Plant, family = Gamma)
stargazer(mdl, mdl2,  title = "CO2 Uptake of plants model")
stargazer(CO2)
blogdown:::serve_site()
library(blogdown)
serve_site()
stop_server()
blogdown:::serve_site()
blogdown:::insert_image_addin()
library(blogdown)
serve_site()
blogdown:::new_post_addin()
install.packages("gt")
library(gt)
install.packages('gt')
install.packages("gt")
devtools::install_github("rstudio/gt")
install.packages("devtools")
install.packages("gt")
library(blogdown)
blogdown:::preview_site()
library(gt)
?gt
<<<<<<< Updated upstream
library(gt)
library(tidyverse)
data("ChickWeight")
ChickWeight %>% head() %>% gt()
=======
library
library(blogdown)
blogdown:::preview_site()
blogdown:::new_post_addin()
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE)
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE)
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org",
dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(plotly)
# get package
package <- show_package("64b54586-6180-4485-83eb-81e8fae3b8fe")
# get all resources for this package
resources <- list_package_resources("64b54586-6180-4485-83eb-81e8fae3b8fe")
datastore_resources <- filter(resources, tolower(format) %in%
c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
blogdown:::preview_site()
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
>>>>>>> Stashed changes
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
library(htmltools)
library(blogdown)
?tagList
library(htmltools)
tagList(plt)
blogdown:::preview_site()
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
m
library(htmltools)
library(mapview)
m <- mapshot(plt, url = paste0(getwd(), "/map.html"))
m <- htmltools::tags$iframe(title = "Map", src = "map.html")
print(m)
m
library(blogdown)
serve_site()
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
library(htmltools)
library(mapview)
m <- mapshot(plt, url = paste0(getwd(), "/map.html"))
m <- htmltools::tags$iframe(title = "Map", src = "map.html")
print(m)
m
serve_site()
git add /content/post
setwd("~/R/blogdown-DataSandBox/content/post/2022-02-16-")
library(blogdown)
blogdown:::preview_site()
serve_site()
library(htmlwidgets)
library(htmltools)
library(htmlwidgets)
?saveWidget
?htmlwidgets
vignette("develop_intro", package = "htmlwidgets")
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
library(htmlwidgets)
library(htmltools)
saveWidget(plt, "map.html")
print("<iframe>")
cat(as.character(page))
library(htmlwidgets)
library(htmltools)
print("<iframe>")
cat(as.character(page))
page
plt
tagList(plt)
tags$iframe(src="map.html")
library(htmlwidgets)
library(htmltools)
page <- tagList(plt)
cat("<iframe>")
plt
cat("</iframe>")
```{r widget, echo=FALSE, warning=FALSE,message=FALSE,results='asis'}
library(blogdown)
serve_site()
serve_site()
stop_server()
serve_site()
html_print(page)
page
c("<iframe>", plt, "</iframe>")
paste("<iframe>", plt, "</iframe>")
tagList(plt)
library(htmlwidgets)
library(htmltools)
page <- tagList(plt)
paste("<iframe>", page, "</iframe>")
html_print(page)
html_print(page)
page
library(htmlwidgets)
library(htmltools)
page <- tagList(plt)
page <- paste("<iframe>", page, "</iframe>")
html_print(page)
print(plt)
library(blogdown)
serve_site()
stop_server()
serve_site()
setwd("~/R/blogdown-DataSandBox")
