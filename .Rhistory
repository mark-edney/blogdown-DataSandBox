download.file(file.path('https://www.naturalearthdata.com/http/'
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip')
download.file(file.path('https://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip'),
f <- tempfile())
download.file(file.path('https://www.naturalearthdata.com/https/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip'),
f <- tempfile())
download.file(file.path('https://www.naturalearthdata.com/http/',
'www.naturalearthdata.com/download/50m/cultural',
'ne_50m_admin_1_states_provinces_lakes.zip'),
f <- tempfile())
blogdown:::preview_site()
blogdown::serve_site()
stop_serve
blogdown::stop_server()
blogdown:::preview_site()
icon(home)
icon('home')
?iconv
?icon
blogdown:::preview_site()
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, eval = FALSE)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9', 'N10'), 'Counts' = c(100,75,40,30,35,20,15,8,4,2))
View(df)
library(ggplot2)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9', 'N10'), 'Counts' = c(100,75,40,30,35,20,15,8,4,2))
library(ggplot2)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9', 'N10'), 'Counts' = c(100,75,40,30,35,20,15,8,4,2))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'idenity')
library(tidyverse)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9', 'N10'), 'Counts' = c(100,75,40,30,35,20,15,8,4,2))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'idenity')
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
g
library(tidyverse)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9'), 'Counts' = c(100,75,40,30,35,20,15,8,4))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
g
library(tidyverse)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9'), 'Counts' = c(100,50,42,30,15,10,4,0,1))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
g
library(tidyverse)
df <- data.frame('Frequency' = c('N1','N2','N3', 'N4','N5', 'N6', 'N7', 'N8', 'N9'), 'Counts' = c(100,50,42,30,15,10,4,0,1))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
g
plot(g)
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
plot(g)
plot(g)
plot(g)
0:9
1:9
mdl <- lm(log(df$Counts)~log(1:9))
mdl
lm(log(df$Counts)~log(1:9))
lm(df$Counts~(1:9))
df$Counts
length(df$Counts)
length(1:9)
lm(df$Counts~(1:9))
lm(df$Counts~(df$Counts))
lm(df$Counts~(1:9))
lm(log(df$Counts)~log(1:9)) %>% predict(newdata=Zn)
log(df$Counts)
log(0)
df2 <- data.frame('y' = log(df$Counts), 'x' = log(1:9))
mdl <- lm(log(df$Counts)~log(1:9))
df2 <- data.frame('y' = log(df$Counts), 'x' = log(1:9))
df2 <- df2[is.finite(df2)]
df2 <- data.frame('y' = log(df$Counts), 'x' = log(1:9))
df2 <- df2[is.finite(df2$y),]
mdl <- lm(log(df$Counts)~log(1:9))
df2 <- data.frame('y' = log(df$Counts), 'x' = log(1:9))
df2 <- df2[is.finite(df2$y),]
mdl <- lm(y~x, data = df2)
g + geom_smooth()
plot(g + geom_smooth())
plot(g + geom_smooth())
?geom_smooth
g + geom_smooth(formula = log(y)~log(x))
g + geom_smooth(formula = log(y)~log(x))
g + geom_smooth(formula = log(y)~log(x), method = 'glm')
g + geom_smooth(formula = log(Counts)~log(Frequency), method = 'glm')
g + geom_smooth(formula = log(Counts)~log(Frequency), method = 'glm')
g + geom_smooth()
g + geom_smooth(Counts~Frequency)
g + geom_smooth(df$Counts~df$Frequency)
g + geom_smooth(y~x)
g + geom_smooth()
g + geom_smooth()
g + geom_smooth(y~x)
g + geom_smooth(formula = y~x)
g + geom_smooth(formula = df$Counts~ df$Frequency)
g + geom_smooth(formula = df$Counts~ df$Frequency, method = 'lm')
g + geom_smooth(formula = df$Counts~ df$Frequency, method = 'glm')
g + stat_smooth()
g + stat_smooth()
g + geom_point()
g + geom_point() + geom_smooth()
ggplot(aes(x = Frequency, y= Counts)) +
geom_smooth()
ggplot(aes(x = Frequency, y= Counts))
ggplot(aes(x = df$Frequency, y= df$Counts))
ggplot(aes(x = df$Frequency, y= df$Counts)) + geom_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_smooth(stat = 'identity')
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point() + geom_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point() + stat_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point() + stat_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point() + geom_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point(stat = 'identity') + geom_smooth()
df %>%
ggplot(aes(x = Frequency, y= Counts)) + geom_point(stat = 'identity', position = 'identity') + geom_smooth()
ggplot(aes(y = df$Counts, x = 0:9))
ggplot(aes(y = df$Counts, x = 0:9)) + geom_point()
df2
ggplot(aes(x = Frequency, y= Counts), data = df2) + geom_smooth()
df2
ggplot(aes(x = x, y= y), data = df2) + geom_smooth()
ggplot(aes(x = exp(x), y= exp(y)), data = df2) + geom_smooth()
ggplot(aes(x = exp(x), y= exp(y)), data = df2) + geom_smooth(method = glm, formula = y~x)
df <- data.frame('Frequency' = 1:9, 'Counts' = c(100,50,42,30,15,10,4,0,1))
library(tidyverse)
df <- data.frame('Frequency' = 1:9, 'Counts' = c(100,50,42,30,15,10,4,0,1))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
library(tidyverse)
df <- data.frame('Frequency' = 1:9, 'Counts' = c(100,50,42,30,15,10,4,0,1))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
plot(g)
g + geom_smooth()
g + geom_smooth(formula = log(y)~log(x))
g + geom_smooth(formula = log(y)~log(x), data = df[is.finite(log(df$Frequency))])
df[is.finite(log(df$Frequency))]
log(df$Frequency)
df
log(df$Counts)
is.finite(log(df$Counts))
df[is.finite(log(df$Counts)),]
g + stat_smooth()
g + geom_smooth(formula = log(y)~log(x), data = df[is.finite(log(df$Counts)),])
g + geom_smooth(formula = y~x, data = df[is.finite(log(df$Counts)),])
library(tidyverse)
df <- data.frame('Frequency' = 1:9, 'Counts' = c(100,50,42,30,15,10,4,0,1))
g <- df %>%
ggplot(aes(x = Frequency, y= Counts)) +
geom_bar(stat = 'identity')
plot(g)
g + geom_smooth(formula = y~x, data = df[is.finite(log(df$Counts)),])
library(tidyverse)
df <- data.frame('Counts' = 1:9, 'Frequency' = c(100,50,42,30,15,10,4,0,1))
g <- df %>%
ggplot(aes(x = Counts, y= Frequency)) +
geom_bar(stat = 'identity')
plot(g)
g + geom_smooth(formula = y~x, data = df[is.finite(log(df$Counts)),])
g + geom_smooth(formula = y~x, data = df[is.finite(log(df$Frequency)),])
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)))
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency))
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency))])
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
predict(mdl)
c(0,df$Counts)
df$Frequency
df$Frequency[0]/sum(df$Frequency)
sum(df$Frequency)
df$Frequency[1]/sum(df$Frequency)
df$Frequency
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
c <- c(0,df$Counts)
cstar <- (c+1)/df$Frequency
c
c+1
(c+1)*df$Frequency
(c+1)*(c(0,df$Frequency))
(df$Counts+1)/df$Frequency
c
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
c <- c(df$Counts)
cstar <- (df$Counts+1)/df$Frequency
c
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
c <- df$Counts
nc <- df$Frequency
nc
nc[nc==0]
nc[nc==0]
df
df[df$Frequency==0,]
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
for (i in df$Counts){
if(df$Frequency[i]==0){
df$Frequency[i] = exp(predict(mdl, newdata = log(i)))
}
}
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
for (i in df$Counts){
if(df$Frequency[i]==0){
df$Frequency[i] = exp(predict(mdl, newdata = log(df$Counts[i])))
}
}
print(df$Counts[i])
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
for (i in df$Counts){
print(df$Counts[i])
}
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
for (i in df$Counts){
if(df$Frequency[i]==0){
print(df$Counts[i])}
}
mdl
mdl
predict(mdl, log(8))
predict(mdl, newdata = log(8))
predict(mdl, newdata = list(log(8)))
predict(mdl, newdata = log(df$Counts))
predict.lm(mdl, newdata = log(df$Counts))
predict(mdl, newdata = log(df$Counts))
predict(mdl, newdata = df)
exp(predict(mdl, newdata = df))
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
cpred <- exp(predict(mdl, newdata = df))
for (i in df$Counts){
if(df$Frequency[i]==0){
df$Frequency[i] <- cpred[i]}
}
df
df[2:,]
df[2:]
df[]
df[1,]
df[1:,]
df[-1,]
df2 <- cbind(df[-1,], c(10,0))
df2
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
cpred <- exp(predict(mdl, newdata = df))
for (i in df$Counts){
if(df$Frequency[i]==0){
df$Frequency[i] <- cpred[i]}
}
df2 <- rbind(df[-1,], c(10,0))
df2
mdl <- lm(log(Frequency) ~ log(Counts), data = df[is.finite(log(df$Frequency)),])
cpred <- exp(predict(mdl, newdata = df))
for (i in df$Counts){
if(df$Frequency[i]==0){
df$Frequency[i] <- cpred[i]}
}
df2 <- rbind(df[-1,], c(10,0))
cpred2 <- exp(predict(mdl, newdata = df2))
for (i in df2$Counts){
if(df2$Frequency[i]==0){
df2$Frequency[i] <- cpred2[i]}
}
df2
df2 <- data.frame('Count c' = 0:9, 'Good Turing c*' = c(0.0000270, 0.446, 1.26, 2.24, 3.24, 4.22, 4.19, 6.21, 7.24, 8.25))
df2
library(gt)
data.frame('Count c' = 0:9, 'Good Turing c*' = c(0.0000270, 0.446, 1.26, 2.24, 3.24, 4.22, 4.19, 6.21, 7.24, 8.25)) %>% gt()
library(gt)
data.frame('Count c' = 0:9, 'Good Turing c*' = c(0.00270, 0.446, 1.26, 2.24, 3.24, 4.22, 4.19, 6.21, 7.24, 8.25)) %>% gt()
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown:::preview_site()
Mark is a Engineer in Training located in Toronto Ontario Canada. He has studied data science since 2019 but has programmed for years before that. He is proficient in `R`, `Python` and `Matlab` but has previously learned some `C` and `C++`.
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_serve()
blogdown::stop_server()
blogdown::stop_server()
blogdown:::preview_site()
blogdown:::preview_site()
install.packages("quarto")
blogdown:::new_post_addin()
reticulate::repl_python()
x = 1/3
print(f"{x}")
x = 1/3
print(f"{x}0.2f")
x = 1/3
print(f"{x}.2f")
x = 1/3
print(f"{x}".2f)
x = 1/3
print(f"{x}":.2f)
x = 1/3
print(f"{x}:.2f")
x = 1/3
print(f"{x:.2f}")
exit
?{{}}
?{}
reticulate::repl_python()
x = 1/3
print("The value is:" + str(x))
print(f"The value is: {x}")
x = 1/3
y = 1/5
print("The value is " + str(x) + "is greater than " + str(y))
print(f"The value is {x} is greater than {y}")
x = 1/3
y = 1/5
print("The value is " + str(x) + " is greater than " + str(y))
print(f"The value is {x} is greater than {y}")
print(f"The value is {x:.3f} is greater than {y:.2f}")
print(f"The value is {} is greater than {}".format(1/3,1/5))
print(f"The value is {} is greater than {}".format(x, y))
print("The value is {} is greater than {}".format(x, y))
print("The value is {} is greater than {}".format(1/3, 1/5))
y = 1/6
x = 1/3
y = 1/6
print("The value is " + str(x) + " is greater than " + str(y))
print(f"The value is {x} is greater than {y}")
print(f"The value is {x:.3f} is greater than {y:.2f}")
print("The value is {} is greater than {}".format(1/3, 1/5))
print("The value is {} is greater than {}".format(1/3, 1/6))
printf"The value is %5.3f is greater than {y:.2f}" % x)
printf"The value is %5.3f is greater than {y:.2f}" % x % y)
print("The value is %5.3f is greater than {y:.2f}" % x % y)
print("The value is %5.3f is" % x)
print("The value is %5.3f is greater than %5.3f" % x %y)
print("The value is %5.3f is greater than %5.3f" % x % y)
print("The value is %5.3f is greater than %5.3f" % x, % y)
print("The value is %5.3f is greater than %5.3f")
print("The value is %5.3f is greater than %5.3f"%x)
print("The value is %5.3f is greater than %5.3f"%(xy))
print("The value is %5.3f is greater than %5.3f"%(x,y))
print("The value is %5.3f is greater than %5.3f" %(x,y))
print("The value is %4.3f is greater than %5.3f" %(x,y))
print("The value is %2.3f is greater than %5.3f" %(x,y))
print(f"The value is {x:2.3f} is greater than {y:.2f}")
print(f"The value is {x:.3f} is greater than {y:.2f}")
print(f"The value is {x:.3} is greater than {y:.2f}")
print(f"The value is {x:.3} is greater than {y:.2f}")
print(f"The value is {x:.3} is greater than {y:.2}")
print(f"The value is {x:0.3f} is greater than {y:.2f}")
print(f"The value is {x:10.3f} is greater than {y:.2f}")
print(f"The value is {x:.3f} is greater than {y:.2f}")
z = [10000, 500, 10, 0.001, .1]
print(f"The value is: {z:.3f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"The value is: {i:.3f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"The value is: {i:.3f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"The value is: {i:5.3f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"The value is: {i:2.3f}")
print(f"The value is: {i:2.3}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"The value is: {i:2.3}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"The value is: {i:.3}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"The value is: {i:.3f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"The value is: {i:2.3f}")
print(f"{i:4.3f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"{i:4.3f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"{i:4.3f}")
print(f"{i:4f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"{i:4f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"{i:4.1f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"{i:6.3f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"{i:6f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"{i:5f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"{i:4f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"{i:4.f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"{i:4.3f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"{i: 4f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"{i:04f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"{i:04}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"the value is: {i:04}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"the value is: {i:04.1}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"the value is: {i:04}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"the value is: {i:04}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"the value is: {i:05}")
print(f"the value is: {i:05}")
x = 1/3
y = 1/6
print("The value is " + str(x) + " is greater than " + str(y))
print(f"The value is {x} is greater than {y}")
print(f"The value is {x:.3f} is greater than {y:.2f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"the value is: {i:05}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"the value is: {i:05}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"the value is: {i:5}")
print(f"The value is {x:.3} is greater than {y:.2}")
x = 1/3
y = 1/6
print("The value is " + str(x) + " is greater than " + str(y))
print(f"The value is {x} is greater than {y}")
print(f"The value is {x:.3} is greater than {y:.2}")
print(f"The value is {x:.3} is greater than {y:.2}")
print(f"The value is {x:.3} is greater than {y:.2}")
print(f"The value is {x:.3} is greater than {y:.2}")
print(f"The value is {x:.3} is greater than {y:.2}")
print(f"The value is {x:.3} is greater than {y:.2}")
print(f"The value is {x:.3} is greater than {y:.2}")
print(f"The value is {x:.3} is greater than {y:.2}")
print(f"The value is {x:.3f} is greater than {y:.2f}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"the value is: {i:5}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"the value is: {i:5}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"the value is: {i:05}")
z = [10000, 500, 10, 0.001, .1]
for i in z:
print(f"the value is: {i:05}")
blogdown:::preview_site()
exit
library(blogdown)
serve_site()
reticulate::repl_python()
print("The value is {} is greater than {}".format(1/3, 1/6))
blogdown:::preview_site()
