package <- show_package("64b54586-6180-4485-83eb-81e8fae3b8fe")
# get all resources for this package
resources <- list_package_resources("64b54586-6180-4485-83eb-81e8fae3b8fe")
datastore_resources <- filter(resources, tolower(format) %in%
c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
blogdown:::preview_site()
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
>>>>>>> Stashed changes
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
library(htmltools)
library(blogdown)
?tagList
library(htmltools)
tagList(plt)
blogdown:::preview_site()
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
m
library(htmltools)
library(mapview)
m <- mapshot(plt, url = paste0(getwd(), "/map.html"))
m <- htmltools::tags$iframe(title = "Map", src = "map.html")
print(m)
m
library(blogdown)
serve_site()
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
library(htmltools)
library(mapview)
m <- mapshot(plt, url = paste0(getwd(), "/map.html"))
m <- htmltools::tags$iframe(title = "Map", src = "map.html")
print(m)
m
serve_site()
git add /content/post
setwd("~/R/blogdown-DataSandBox/content/post/2022-02-16-")
library(blogdown)
blogdown:::preview_site()
serve_site()
library(htmlwidgets)
library(htmltools)
library(htmlwidgets)
?saveWidget
?htmlwidgets
vignette("develop_intro", package = "htmlwidgets")
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
library(htmlwidgets)
library(htmltools)
saveWidget(plt, "map.html")
print("<iframe>")
cat(as.character(page))
library(htmlwidgets)
library(htmltools)
print("<iframe>")
cat(as.character(page))
page
plt
tagList(plt)
tags$iframe(src="map.html")
library(htmlwidgets)
library(htmltools)
page <- tagList(plt)
cat("<iframe>")
plt
cat("</iframe>")
```{r widget, echo=FALSE, warning=FALSE,message=FALSE,results='asis'}
library(blogdown)
serve_site()
serve_site()
stop_server()
serve_site()
html_print(page)
page
c("<iframe>", plt, "</iframe>")
paste("<iframe>", plt, "</iframe>")
tagList(plt)
library(htmlwidgets)
library(htmltools)
page <- tagList(plt)
paste("<iframe>", page, "</iframe>")
html_print(page)
html_print(page)
page
library(htmlwidgets)
library(htmltools)
page <- tagList(plt)
page <- paste("<iframe>", page, "</iframe>")
html_print(page)
print(plt)
library(blogdown)
serve_site()
stop_server()
serve_site()
setwd("~/R/blogdown-DataSandBox")
library(knitr)
blogdown:::preview_site()
library(blogdown)
serve_site()
?include_app
?include_app
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
include_app("map.html")
stop_server()
serve_site()
knitr::include_app("content\post\2022-02-16-\map.html")
knitr::include_app("content\\post\\2022-02-16-\\map.html")
knitr::include_app("..\\post\\2022-02-16-\\map.html")
knitr::include_app("..\\2022-02-16-\\map.html")
knitr::include_app("map.html")
library(widgetframe)
library(widgetframe)
frameWidget(plt)
stop_server()
serve_site()
stop_server()
serve_site()
?frameWidget
frameWidget(plt)
stop_server()
serve_site()
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
library
library(blogdown)
serve_site()
stop_server()
serve_site()
library(widgetframe)
# widgetframe supports 3 custom knitr chunk options...
# For all practicle purposes this should always be FALSE
knitr::opts_chunk$set(widgetframe_self_contained = FALSE) # default = FALSE
# For all practicle purposes this should always be TRUE
knitr::opts_chunk$set(widgetframe_isolate_widgets = TRUE) # default = TRUE
# Only needed in bookdown format/s such as bookdown::gitbook. Otherwise don't set.
# knitr::opts_chunk$set(widgetframe_widgets_dir = 'widgets' )
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
plt
# widgetframe supports 3 custom knitr chunk options...
# For all practicle purposes this should always be FALSE
knitr::opts_chunk$set(widgetframe_self_contained = FALSE) # default = FALSE
# For all practicle purposes this should always be TRUE
knitr::opts_chunk$set(widgetframe_isolate_widgets = TRUE) # default = TRUE
# Only needed in bookdown format/s such as bookdown::gitbook. Otherwise don't set.
# knitr::opts_chunk$set(widgetframe_widgets_dir = 'widgets' )
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
htmlwidgets::saveWidget(plt, "Map.html")
include_url("Map.html")
htmlwidgets::saveWidget(plt, "Map.html")
# widgetframe supports 3 custom knitr chunk options...
# For all practicle purposes this should always be FALSE
knitr::opts_chunk$set(widgetframe_self_contained = FALSE) # default = FALSE
# For all practicle purposes this should always be TRUE
knitr::opts_chunk$set(widgetframe_isolate_widgets = TRUE) # default = TRUE
# Only needed in bookdown format/s such as bookdown::gitbook. Otherwise don't set.
# knitr::opts_chunk$set(widgetframe_widgets_dir = 'widgets' )
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
# widgetframe supports 3 custom knitr chunk options...
# For all practicle purposes this should always be FALSE
knitr::opts_chunk$set(widgetframe_self_contained = FALSE) # default = FALSE
# For all practicle purposes this should always be TRUE
knitr::opts_chunk$set(widgetframe_isolate_widgets = TRUE) # default = TRUE
# Only needed in bookdown format/s such as bookdown::gitbook. Otherwise don't set.
# knitr::opts_chunk$set(widgetframe_widgets_dir = 'widgets' )
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
htmlwidgets::saveWidget(plt, "\Map.html")
htmlwidgets::saveWidget(plt, "\\Map.html")
htmlwidgets::saveWidget(plt, "Map.html")
library(knitr)
library(blogdown)
serve_site()
stop_server()
serve_site()
library(blogdown)
serve_site()
source("~/.active-rstudio-document")
stop_server()
plt
blogdown:::preview_site()
library(blogdown)
serve_site()
blogdown:::new_post_addin()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
library(blogdown)
blogdown:::preview_site()
knitr::knit("index.en.Rmd")
getwd()
setwd("~/R/blogdown-DataSandBox/content/post/2022-02-19-bike-share-in-toronto")
knitr::knit("index.en.Rmd")
library(knitr)
setwd("~/R/blogdown-DataSandBox/content/post/2022-01-30-job-posting-analysis")
setwd("~/R/blogdown-DataSandBox/content/post/2022-02-19-bike-share-in-toronto")
knitr::knit2html("index.en.Rmd")
knitr::render_html("index.en.Rmd")
knitr::render("index.en.Rmd")
cls
cls()
unlink("index.en_cache", recursive = TRUE)
knitr::include_url("https://m2edney.shinyapps.io/Toronto_bike/?_ga=2.75026646.519818068.1645317226-1341333380.1645206372")
library(blogdown)
blogdown:::preview_site()
setwd("~/R/blogdown-DataSandBox")
stop_server()
serve_site()
unlink("content/post/2022-02-19-bike-share-in-toronto/index.en_cache", recursive = TRUE)
install.packages("opendatatoronto",
repos = "http://cran.us.r-project.org",
dependencies = TRUE)
library(opendatatoronto)
library(tidyverse)
library(lubridate)
library(shiny)
sidebarPanel(
sliderInput("dur",
"Trip Duration:",
min = 0,
max = 500,
value = c(0,500)),
checkboxInput("freq",
"Exclude annual users:",
value = FALSE))
# get package
package <- show_package("7e876c24-177c-4605-9cef-e50dd74c617f")
# get all resources for this package
resources <- list_package_resources("7e876c24-177c-4605-9cef-e50dd74c617f")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('zip', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, name == "Bike share ridership 2020") %>% get_resource()
data2 <-  data$`2020-06.csv`
data2[grepl("Time",names(data2))] <-
lapply(data2[grepl("Time",names(data2))], parse_date_time, orders = "mdy HM")
data2$Dur <- as.numeric(data2$End.Time - data2$Start.Time,units="mins")
knitr::include_url("https://m2edney.shinyapps.io/Toronto_bike/?_ga=2.75026646.519818068.1645317226-1341333380.1645206372")
# widgetframe supports 3 custom knitr chunk options...
# For all practicle purposes this should always be FALSE
knitr::opts_chunk$set(widgetframe_self_contained = FALSE) # default = FALSE
# For all practicle purposes this should always be TRUE
knitr::opts_chunk$set(widgetframe_isolate_widgets = TRUE) # default = TRUE
# Only needed in bookdown format/s such as bookdown::gitbook. Otherwise don't set.
# knitr::opts_chunk$set(widgetframe_widgets_dir = 'widgets' )
knitr::include_url("https://m2edney.shinyapps.io/Toronto_bike/?_ga=2.75026646.519818068.1645317226-1341333380.1645206372")
blogdown:::new_post_addin()
stop_server()
blogdown:::new_post_addin()
setwd("~/R/blogdown-DataSandBox")
blogdown:::preview_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
setwd("~/R/blogdown-DataSandBox")
blogdown:::new_post_addin()
