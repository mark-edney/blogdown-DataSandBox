microbenchmark(df %>% group_by(class) %>%
summarise(avg = mean(age)),
dt[,avg = mean(age), by = class])
dt[,avg = mean(age), by = class]
dt[,.(avg = mean(age)), by = class]
df %>% group_by(class) %>%
summarise(avg = mean(age))
ti %>% group_by(class) %>%
summarise(avg = mean(age))
microbenchmark(df %>% group_by(class) %>%
summarise(avg = mean(age)),
dt[,.(avg = mean(age)), by = class],
ti %>% group_by(class) %>%
summarise(avg = mean(age)))
library(microbenchmark)
microbenchmark(sqrt(3),
4 |> sqrt(),
5 %>% sqrt())
result <- microbenchmark(df %>% group_by(class) %>%
summarise(avg = mean(age)),
dt[,.(avg = mean(age)), by = class],
ti %>% group_by(class) %>%
summarise(avg = mean(age)))
result$time
result$expr
result
View(result)
result %>% group_by(expr) %>% summarise(mean(time))
result %>%
group_by(expr) %>%
summarise(mean(time))
result <- microbenchmark(df %>%
group_by(class) %>%
summarise(avg = mean(age)),
dt[,.(avg = mean(age)), by = class],
ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
result %>%
group_by(expr) %>%
summarise(mean(time))
result <- microbenchmark(df %>%
group_by(class) %>%
summarise(avg = mean(age)),
dt[,.(avg = mean(age)), by = class],
ti %>%
group_by(class) %>%
summarise(avg = mean(age)),
times = 1000L)
result %>%
group_by(expr) %>%
summarise(mean(time))
microbenchmark(df %>%
group_by(class) %>%
summarise(avg = mean(age)),
dt[,.(avg = mean(age)), by = class],
ti %>%
group_by(class) %>%
summarise(avg = mean(age)),
times = 1000L)
microbenchmark(df %>%
group_by(class) %>%
summarise(avg = mean(age)),
dt[,.(avg = mean(age)), by = class],
ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
library(blogdown)
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
blogdown::build_site()
blogdown::build_site()
serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
stop_server()
blogdown:::new_post_addin()
serve_site()
library(microbenchmark)
library(tidyverse)
library(data.table)
library(microbenchmark)
library(farff)
df <- farff::readARFF('dataset_31_credit-g.arff')
dt <- setDT(df)
ti <- tibble(df)
microbenchmark(df %>%
group_by(class) %>%
summarise(avg = mean(age)),
dt[,.(avg = mean(age)), by = class],
ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
microbenchmark(df = df %>%
group_by(class) %>%
summarise(avg = mean(age)),
dt[,.(avg = mean(age)), by = class],
ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
microbenchmark(Data_Frame = df %>%
group_by(class) %>%
summarise(avg = mean(age)),
Data_Table = dt[,.(avg = mean(age)), by = class],
Tibble = ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
View(dt)
microbenchmark(Data_Frame = df %>%
filter(credit > 5000, age <35) %>%
nrow(),
Data_Table = dt[.(credit > 5000, age <35),.N(),],
Tibble = ti %>%
filter(credit > 5000, age <35) %>%
nrow())
microbenchmark(Data_Frame = df %>%
filter(credit_amount > 5000, age <35) %>%
nrow(),
Data_Table = dt[.(credit_amount > 5000, age <35),.N(),],
Tibble = ti %>%
filter(credit_amount > 5000, age <35) %>%
nrow())
dt[.(credit_amount > 5000, age <35),.N(),]
dt[.(credit_amount > 5000, age <35),,]
dt[.(credit_amount > 5000),,]
dt[credit_amount > 5000,,]
dt[.(credit_amount > 5000 & age <35),,]
dt[credit_amount > 5000 & age <35,,]
microbenchmark(Data_Frame = df %>%
filter(credit_amount > 5000, age <35) %>%
nrow(),
Data_Table = dt[credit_amount > 5000 & age < 35, .N() ,],
Tibble = ti %>%
filter(credit_amount > 5000, age <35) %>%
nrow())
microbenchmark(Data_Frame = df %>%
filter(credit_amount > 5000, age <35) %>%
nrow(),
Data_Table = dt[credit_amount > 5000 & age < 35, .N ,],
Tibble = ti %>%
filter(credit_amount > 5000, age <35) %>%
nrow())
c(Data_Frame = df %>%
group_by(class) %>%
summarise(avg = mean(age)),
Data_Table = dt[,.(avg = mean(age)), by = class],
Tibble = ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
```
## Taking counts
Another function of interest is the '.N' function. This function will return the count of rows.
```{r counts}
microbenchmark(Data_Frame = df %>%
filter(credit_amount > 5000, age <35) %>%
nrow(),
Data_Table = d
c(Data_Frame = df %>%
filter(credit_amount > 5000, age <35) %>%
nrow(),
Data_Table = dt[credit_amount > 5000 & age < 35, .N ,],
Tibble = ti %>%
filter(credit_amount > 5000, age <35) %>%
nrow())
C('a','b')
c('a','b')
paste('a','b')
paste0('a','b')
dt[,property = paste(property_magnitude, housing)]
dt[,property := paste(property_magnitude, housing)]
dt
library(tidyverse)
library(data.table)
library(microbenchmark)
library(farff)
df <- farff::readARFF('dataset_31_credit-g.arff')
dt <- setDT(df)
ti <- tibble(df)
microbenchmark(Data_Frame = df %>%
group_by(class) %>%
summarise(avg = mean(age)),
Data_Table = dt[,.(avg = mean(age)), by = class],
Tibble = ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
microbenchmark(Data_Frame = df$property = paste(df$property_magnitude, df$housing),
microbenchmark(Data_Frame = df$property <- paste(df$property_magnitude, df$housing),
Data_Table = dt[,property := paste(property_magnitude, housing)],
Tibble = ti$property <- paste(ti$property_magnitude, ti$housing))
library(tidyverse)
library(data.table)
library(microbenchmark)
library(farff)
df <- farff::readARFF('dataset_31_credit-g.arff')
dt <- setDT(df)
ti <- tibble(df)
microbenchmark(Data_Frame = df %>%
group_by(class) %>%
summarise(avg = mean(age)),
Data_Table = dt[,.(avg = mean(age)), by = class],
Tibble = ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
microbenchmark(Data_Frame = df %>%
filter(credit_amount > 5000, age <35) %>%
nrow(),
Data_Table = dt[credit_amount > 5000 & age < 35, .N ,],
Tibble = ti %>%
filter(credit_amount > 5000, age <35) %>%
nrow())
blogdown:::preview_site()
blogdown:::preview_site()
library(tidyverse)
library(data.table)
library(microbenchmark)
library(farff)
df <- farff::readARFF('dataset_31_credit-g.arff')
dt <- setDT(df)
ti <- tibble(df)
microbenchmark(Data_Frame = df %>%
group_by(class) %>%
summarise(avg = mean(age)),
Data_Table = dt[,.(avg = mean(age)), by = class],
Tibble = ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
microbenchmark(Data_Frame = df %>%
filter(credit_amount > 5000, age <35) %>%
nrow(),
Data_Table = dt[credit_amount > 5000 & age < 35, .N ,],
Tibble = ti %>%
filter(credit_amount > 5000, age <35) %>%
nrow())
df %>% mutate(property = paste(property_magnitude, housing))
microbenchmark(Data_Frame = df %>% mutate(property = paste(property_magnitude, housing)),
Data_Table = dt[,property := paste(property_magnitude, housing)],
Tibble = ti %>% mutate(property = paste(property_magnitude, housing)))
group <- microbenchmark(Data_Frame = df %>%
group_by(class) %>%
summarise(avg = mean(age)),
Data_Table = dt[,.(avg = mean(age)), by = class],
Tibble = ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
group
View(group)
View(group)
View(group)
group[, mean(Data_Frame - Data_Table)]
group
group[, mean("time")]
group[, mean(time)]
group[, mean(time),]
View(group)
group[, mean(time), by = expr]
type(group)
str(group)
?microbenchmark
summary(group)
summary(group)$mean
avg = summary(group)$mean
mean((avg[1]-avg[2])/avg[2], (avg[3]-avg[2])/avg[2])
group <- microbenchmark(Data_Frame = df %>%
group_by(class) %>%
summarise(avg = mean(age)),
Data_Table = dt[,.(avg = mean(age)), by = class],
Tibble = ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
group <- microbenchmark(Data_Frame = df %>%
group_by(class) %>%
summarise(avg = mean(age)),
Data_Table = dt[,.(avg = mean(age)), by = class],
Tibble = ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
print(group)
avg = summary(group)$mean
groupdiff <- mean((avg[1]-avg[2])/avg[2], (avg[3]-avg[2])/avg[2])8100
avg = summary(group)$mean
groupdiff <- mean((avg[1]-avg[2])/avg[2], (avg[3]-avg[2])/avg[2])*100
groupdiff
blogdown::build_site()
rmarkdown::knitr_options()
knitr::read_chunk()
knitr::knit_params()
?knitr::knit_params
library(blogdown)
serve_site()
stop_server()
stop_server()
serve_site()
library(tidyverse)
library(data.table)
library(microbenchmark)
library(farff)
df <- farff::readARFF('dataset_31_credit-g.arff')
dt <- setDT(df)
ti <- tibble(df)
group <- microbenchmark(Data_Frame = df %>%
group_by(class) %>%
summarise(avg = mean(age)),
Data_Table = dt[,.(avg = mean(age)), by = class],
Tibble = ti %>%
group_by(class) %>%
summarise(avg = mean(age)))
print(group)
avg = summary(group)$mean
groupdiff <- mean((avg[2]-avg[1])/avg[1], (avg[2]-avg[3])/avg[3])*100
counts <- microbenchmark(Data_Frame = df %>%
filter(credit_amount > 5000, age <35) %>%
nrow(),
Data_Table = dt[credit_amount > 5000 & age < 35, .N ,],
Tibble = ti %>%
filter(credit_amount > 5000, age <35) %>%
nrow())
print(counts)
avg = summary(counts)$mean
countdiff <- mean((avg[2]-avg[1])/avg[1], (avg[2]-avg[3])/avg[3])*100
new <- microbenchmark(Data_Frame = df %>% mutate(property = paste(property_magnitude, housing)),
Data_Table = dt[,property := paste(property_magnitude, housing)],
Tibble = ti %>% mutate(property = paste(property_magnitude, housing)))
print(new)
avg = summary(new)$mean
newdiff <- mean((avg[2]-avg[1])/avg[1], (avg[2]-avg[3])/avg[3])*100
total
total <- round(mean(groupdiff, countdiff, newdiff))
total <- round(mean(groupdiff, countdiff, newdiff))
total
View(dt)
dt[credit_amount > 199,,by = .(purpose, class)]
dt[credit_amount > 100,,by = .(purpose, class)]
dt[credit_amount > 1000,,by = .(purpose, class)]
dt[credit_amount > 1000,,by = .(purpose, class)][,N., by = personal_status]
dt[credit_amount > 1000,,by = .(purpose, class)][,.N, by = personal_status]
View(df)
dt[credit_amount > 1000,mean(age),by = .(purpose, class)]
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][class = 'good']
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][class = 'good',]
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][class = 'good',.N]
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][.(class = 'good'),.N]
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][.(class == 'good'),.N]
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][class == 'good',.N]
dt[credit_amount > 1000,mean(age),by = .(purpose, class)][class == 'good',.N, by = purpose]
dt[credit_amount > 1000, age = mean(age),by = .(purpose, class)][class == 'good',age = mean(age), by = purpose]
dt[credit_amount > 1000, age = mean(age),by = .(purpose, class)]
dt[credit_amount > 1000, age := mean(age),by = .(purpose, class)]
dt[credit_amount > 1000, age := mean(age),by = .(purpose, class)]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][class==good,]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][class == 'good',]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][class == 'good']
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][class == 'good']
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == 'good' && age < mean(age))]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == 'good' & age < mean(age))]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(age < mean(age))]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][age < mean(age)]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(age < mean(age))]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == 'good')]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == 'good')]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == 'good'),]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == 'good'),,]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][class == "good"]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][.(class == "good")]
dt[credit_amount > 1000, .(age = mean(age)),by = .(purpose, class)][class == "good" & age < mean(age)]
stop_server()
stop_server()
serve_site()
reticulate::repl_python()
from svglib.svglib import svg2rlg
reticulate::repl_python()
from svglib.svglib import svg2rlg
from reportlab.graphics import renderPDF, renderPM
img = svg2rlf("Rlogo.svg")
renderPM.drawToFile(img, "file.png", fmt="PNG")
img = svg2rlg("Rlogo.svg")
from svglib.svglib import svg2rlg
from reportlab.graphics import renderPDF, renderPM
img = svg2rlg("Rlogo.svg")
renderPM.drawToFile(img, "file.png", fmt="PNG")
renderPDF.drawToFile(img, "file.pdf")
```{python intro}
from svglib.svglib import svg2rlg
from reportlab.graphics import renderPDF, renderPM
img = svg2rlg("Rlogo.svg")
renderPM.drawToFile(img, "file.png", fmt="PNG")
renderPDF.drawToFile(img, "file.pdf")
img = svg2rlg("gt_parts_of_a_table.svg")
renderPM.drawToFile(img, "file.png", fmt="PNG")
renderPDF.drawToFile(img, "file.pdf")
quit
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, eval = FALSE)
blogdown:::new_post_addin()
reticulate::repl_python()
import PyPDF2, os
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfWriter.write('merged.pdf')
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfWriter.write('merged.pdf')
pdfiles
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf') and not 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfWriter.write('merged.pdf')
pdfiles
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf') and filename not = 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfWriter.write('merged.pdf')
pdfiles
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
if filename != 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfWriter.write('merged.pdf')
pdfiles
pdfWriter
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
if filename != 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger(pdfiles)
pdfWriter.write('merged.pdf')
pdfWriter
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
if filename != 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger()
pdfWriter.merge(pdfiles)
pdfWriter.write('merged.pdf')
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
if filename != 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfWriter = PyPDF2.PdfFileMerger()
pdfWriter.append(pdfiles)
pdfWriter.write('merged.pdf')
import PyPDF2, os
pdfiles = []
for filename in os.listdir('.'):
if filename.endswith('.pdf'):
if filename != 'merged.pdf':
pdfiles.append(filename)
pdfiles.sort(key = str.lower)
pdfMerge = PyPDF2.PdfFileMerger()
for filename in pdfiles:
pdfFile = open(filename, 'rb')
pdfReader = PyPDF2.PdfFileReader(pdfFile)
pdfMerge.append(pdfReader)
pdfMerge.write('merged.pdf')
?pdfMerge
pdfMerge = PyPDF2.PdfFileMerger()
for filename in pdfiles:
pdfFile = open(filename, 'rb')
pdfReader = PyPDF2.PdfFileReader(pdfFile)
pdfFile.close()
pdfMerge.append(pdfReader)
pdfMerge.write('merged.pdf')
pdfMerge = PyPDF2.PdfFileMerger()
for filename in pdfiles:
pdfFile = open(filename, 'rb')
pdfReader = PyPDF2.PdfFileReader(pdfFile)
pdfMerge.append(pdfReader)
pdfFile.close()
pdfMerge.write('merged.pdf')
blogdown:::preview_site()
quit
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, eval = FALSE)
blogdown::serve_site()
