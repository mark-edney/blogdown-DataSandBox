plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
# widgetframe supports 3 custom knitr chunk options...
# For all practicle purposes this should always be FALSE
knitr::opts_chunk$set(widgetframe_self_contained = FALSE) # default = FALSE
# For all practicle purposes this should always be TRUE
knitr::opts_chunk$set(widgetframe_isolate_widgets = TRUE) # default = TRUE
# Only needed in bookdown format/s such as bookdown::gitbook. Otherwise don't set.
# knitr::opts_chunk$set(widgetframe_widgets_dir = 'widgets' )
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(opendatatoronto)
library(dplyr)
library(leaflet)
# get package
package <- show_package("a154790c-4a8a-4d09-ab6b-535ddb646770")
# get all resources for this package
resources <- list_package_resources("a154790c-4a8a-4d09-ab6b-535ddb646770")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('csv', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, row_number()==1) %>% get_resource()
df <- data$geometry
cameraicon <- makeIcon(
iconUrl = "https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg",
iconWidth = 35, iconHeight = 35
)
plt <- df %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)
install.packages("opendatatoronto", repos = "http://cran.us.r-project.org", dependencies = TRUE)
htmlwidgets::saveWidget(plt, "\Map.html")
htmlwidgets::saveWidget(plt, "\\Map.html")
htmlwidgets::saveWidget(plt, "Map.html")
library(knitr)
library(blogdown)
serve_site()
stop_server()
serve_site()
library(blogdown)
serve_site()
source("~/.active-rstudio-document")
stop_server()
plt
blogdown:::preview_site()
library(blogdown)
serve_site()
blogdown:::new_post_addin()
stop_server()
serve_site()
stop_server()
serve_site()
stop_server()
serve_site()
library(blogdown)
blogdown:::preview_site()
knitr::knit("index.en.Rmd")
getwd()
setwd("~/R/blogdown-DataSandBox/content/post/2022-02-19-bike-share-in-toronto")
knitr::knit("index.en.Rmd")
library(knitr)
setwd("~/R/blogdown-DataSandBox/content/post/2022-01-30-job-posting-analysis")
setwd("~/R/blogdown-DataSandBox/content/post/2022-02-19-bike-share-in-toronto")
knitr::knit2html("index.en.Rmd")
knitr::render_html("index.en.Rmd")
knitr::render("index.en.Rmd")
cls
cls()
unlink("index.en_cache", recursive = TRUE)
knitr::include_url("https://m2edney.shinyapps.io/Toronto_bike/?_ga=2.75026646.519818068.1645317226-1341333380.1645206372")
library(blogdown)
blogdown:::preview_site()
setwd("~/R/blogdown-DataSandBox")
stop_server()
serve_site()
unlink("content/post/2022-02-19-bike-share-in-toronto/index.en_cache", recursive = TRUE)
install.packages("opendatatoronto",
repos = "http://cran.us.r-project.org",
dependencies = TRUE)
library(opendatatoronto)
library(tidyverse)
library(lubridate)
library(shiny)
sidebarPanel(
sliderInput("dur",
"Trip Duration:",
min = 0,
max = 500,
value = c(0,500)),
checkboxInput("freq",
"Exclude annual users:",
value = FALSE))
# get package
package <- show_package("7e876c24-177c-4605-9cef-e50dd74c617f")
# get all resources for this package
resources <- list_package_resources("7e876c24-177c-4605-9cef-e50dd74c617f")
# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources <- filter(resources, tolower(format) %in% c('zip', 'geojson'))
# load the first datastore resource as a sample
data <- filter(datastore_resources, name == "Bike share ridership 2020") %>% get_resource()
data2 <-  data$`2020-06.csv`
data2[grepl("Time",names(data2))] <-
lapply(data2[grepl("Time",names(data2))], parse_date_time, orders = "mdy HM")
data2$Dur <- as.numeric(data2$End.Time - data2$Start.Time,units="mins")
knitr::include_url("https://m2edney.shinyapps.io/Toronto_bike/?_ga=2.75026646.519818068.1645317226-1341333380.1645206372")
# widgetframe supports 3 custom knitr chunk options...
# For all practicle purposes this should always be FALSE
knitr::opts_chunk$set(widgetframe_self_contained = FALSE) # default = FALSE
# For all practicle purposes this should always be TRUE
knitr::opts_chunk$set(widgetframe_isolate_widgets = TRUE) # default = TRUE
# Only needed in bookdown format/s such as bookdown::gitbook. Otherwise don't set.
# knitr::opts_chunk$set(widgetframe_widgets_dir = 'widgets' )
knitr::include_url("https://m2edney.shinyapps.io/Toronto_bike/?_ga=2.75026646.519818068.1645317226-1341333380.1645206372")
blogdown:::new_post_addin()
stop_server()
blogdown:::new_post_addin()
setwd("~/R/blogdown-DataSandBox")
blogdown:::preview_site()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
setwd("~/R/blogdown-DataSandBox")
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::preview_site()
blogdown:::update_meta_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
getwd
getwd()
library(blogdown)
new_post()
new_post_addon
new_post_addin
blogdown:::new_post_addin()
blogdown:::new_post_addin()
find_config
blogdown:::find_config()
blogdown:::find_config
setwd("~/R/blogdown-DataSandBox")
blogdown:::new_post_addin()
stop_server()
setwd("~/R/blogdown-DataSandBox")
serve_site()
blogdown:::new_post_addin()
stop_server()
blogdown:::new_post_addin()
blogdown:::new_post_addin()
blogdown:::preview_site()
library(blogdown)
install.packages("reticulate")
library(reticulate )
?reticulate
blogdown:::new_post_addin()
library(reticulate)
reticulate::repl_python()
y
import numpy as np
?data
library(help = "datasets")
library(reticulate)
data(AirPassengers)
?reticulate
reticulate::repl_python()
import numpy as np
import pandas as pd
import seaborn as sb
library(blogdown)
quit
library(reticulate)
data(AirPassengers)
library(blogdown)
blogdown:::preview_site()
reticulate::repl_python()
import numpy as np
import pandas as pd
import seaborn as sb
r
print(r)
pd.DataFrame(r)
names(r)
?r
View(r)
r.airpassengers
r.AirPassengers
AirPassengers
quit
library(reticulate)
data(AirPassengers)
AirPassengers
library(help = "datasets")
library(reticulate)
data(UKgas)
reticulate::repl_python()
import numpy as np
import pandas as pd
import seaborn as sb
quit
reticulate::repl_python()
import numpy as np
import pandas as pd
import seaborn as sb
r
r.UKgas
quit
library(reticulate)
data(UKgas)
UKgas
data(WWWusage)
WWWusage
WWWusage
data(uspop)
uspop
data("trees")
trees
library(reticulate)
data(trees)
library(reticulate)
data(trees)
summary(trees)
glimpse(trees)
library(tidyverse)
?glimpse
glimpse(trees)
glimpse(trees)
library(reticulate)
library(tidyverse)
data(trees)
glimpse(trees)
reticulate::repl_python()
import numpy as np
import pandas as pd
import seaborn as sb
r.trees
data = pd.DataFrame(r.trees)
data = r.trees
data = r.trees
sb.scatterplot(data)
?sb
data = r.trees
?sb.scatterplot()
import numpy as np
import pandas as pd
import seaborn as sns
data = r.trees
sns.scatterplot(data, x= Girth, y= height)
data = r.trees
sns.scatterplot(data, x= girth, y= height)
data
data = r.trees
sns.scatterplot(data, x= data.Girth, y= data.Height)
data.Height
sns.scatterplot(x= data.Girth, y= data.Height)
data = r.trees
sns.scatterplot(x= data.Girth, y= data.Height)
plt.show()
data = r.trees
sns.scatterplot(x= data.Girth, y= data.Height)
sns.show()
data = r.trees
sns.scatterplot(x= data.Girth, y= data.Height)
data = r.trees
sns.scatterplot(data = data, x= "Girth", y= "Height")
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
data = r.trees
sns.scatterplot(data = data, x= "Girth", y= "Height")
plt.show()
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import scikitlearn as sk
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn as sk
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn as sk
data = r.trees
means = np.mean(data)
sns.scatterplot(data = data, x= "Girth", y= "Height")
plt.show()
data = r.trees
means = np.mean(data)
data["big"] = data.Height > means.Height
sns.scatterplot(data = data, x= "Girth", y= "Height", hue = "big")
plt.show()
quit
print(py.means)
print(py$means)
reticulate::repl_python()
data = r.trees
means = np.mean(data)
data["big"] = data.Height > means.Height
sns.scatterplot(data = data, x= "Girth", y= "Height", hue = "big")
plt.show()
mdl = sk.linear_model.LineaerRegression()
data = r.trees
means = np.mean(data)
data["big"] = data.Height > means.Height
sns.scatterplot(data = data, x= "Girth", y= "Height", hue = "big")
plt.show()
from sklearn.linear_model import LinearRegression
mdl = LineaerRegression()
data = r.trees
means = np.mean(data)
data["big"] = data.Height > means.Height
sns.scatterplot(data = data, x= "Girth", y= "Height", hue = "big")
plt.show()
from sklearn.linear_model import LinearRegression
mdl = LinearRegression()
mdl.fit(data["Girth"], data["Height"])
data = r.trees
means = np.mean(data)
data["big"] = data.Height > means.Height
sns.scatterplot(data = data, x= "Girth", y= "Height", hue = "big")
plt.show()
from sklearn.linear_model import LinearRegression
mdl = LinearRegression()
mdl.fit(data["Girth"], data["Height"])
data
sns.scatterplot(data = data, x= "Girth", y= "Height", hue = "big")
plt.show()
data = r.trees
means = np.mean(data)
data["big"] = data.Height > means.Height
sns.scatterplot(data = data, x= "Girth", y= "Height", hue = "big")
plt.show()
from sklearn.linear_model import LinearRegression
mdl = LinearRegression()
mdl.fit(data["Girth"], data["Height"])
f
quit
library(reticulate)
library(tidyverse)
data(trees)
glimpse(trees)
library(blogdown)
serve_site()
stop_server()
stop_server()
serve_site()
reticulate::repl_python()
means = np.mean(data, axis = 0)
quit
quit
print(py$means)
py$data %>%
ggplot(aes(x = Girth, y = Height, colour = big))
print(py$means)
py$data
#ggplot(aes(x = Girth, y = Height, colour = big))
print(py$means)
print(py$data)
#ggplot(aes(x = Girth, y = Height, colour = big))
library(reticulate)
library(tidyverse)
data(trees)
glimpse(trees)
reticulate::repl_python()
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
data = r.trees
means = np.mean(data, axis = 0)
data["big"] = data.Height > means.Height
sns.scatterplot(data = data, x= "Girth", y= "Height", hue = "big")
plt.show()
from sklearn.linear_model import LinearRegression
mdl = LinearRegression()
quit
print(py$means)
print(py$data) %>%
ggplot(aes(x = Girth, y = Height, colour = big))
print(py$data) %>%
ggplot(aes(x = Girth, y = Height, colour = big)) +
geom_point()
print(py$means)
py$data %>%
ggplot(aes(x = Girth, y = Height, colour = big)) +
geom_point()
reticulate::repl_python()
data = r.trees
means = np.mean(data, axis = 0)
data["big"] = data.Height > means.Height
sns.scatterplot(data = data, x= "Girth", y= "Height", hue = "big")
plt.show()
from sklearn.linear_model import LinearRegression
mdl = LinearRegression().fit(data.Girth, data.Height)
quit
print(py$mdl)
print(py$means)
py$data %>%
ggplot(aes(x = Girth, y = Height, colour = big)) +
geom_point()
print(py$mdl)
unlink("content/post/2022-03-03-python-in-r-markdown/index.en_cache", recursive = TRUE)
py$r
reticulate::repl_python()
data = r.trees
means = np.mean(data, axis = 0)
data["big"] = data.Height > means.Height
sns.scatterplot(data = data, x= "Girth", y= "Height", hue = "big")
plt.show()
from sklearn.linear_model import LinearRegression
mdl = LinearRegression()
mdl.fit(data["Girth"], data["Height"])
print(mdl.get_params)
mdl.fit(data.Girth, data.Height)
data.Girth
data.Height
mdl.fit(data.Girth.values, data.Height.values)
mdl.fit(data.Girth.values(), data.Height.values())
data.Girth
data.Girth.values
mdl.fit(data.Girth.values, data.Height.values)
data.Girth
type(data.Girth)
mdl.fit(data[-"Height"])
mdl.fit(data["Height"])
mdl.fit(data["Girth"],data["Height"])
data["Girth"]
data["Girth"].reshape(-1,1)
data["Girth"].values.reshape(-1,1)
data["Girth"]
data["Girth"][0]
mdl.fit(x = data["Girth"],y = data["Height"])
mdl.fit(X = data["Girth"],y = data["Height"])
mdl.fit([data["Girth"]],data["Height"])
mdl.fit([data["Girth"]],[data["Height"]])
mdl
mdl.fit([data["Girth"]],[data["Height"]])
mdl.coef_
mdl.fit([data["Girth"]], [data["Height"]])
mdl.score([data["Girth"]], [data["Height"]])
mdl
mdl.score([data["Girth"]], data["Height"])
[data["Girth"]]
[data["Girth"].values]
mdl.fit([data["Girth"].values], [data["Height"].values])
mdl.coef_
mdl.fit_intercept
mdl.fit_report
mdl.plo
mdl.predict([10])
mdl.predict([[10]])
mdl.fit(data["Girth"].values, data["Height"].values)
mdl.fit(data["Girth"].values.transpose(), data["Height"].values.transpose())
data.Girth
data.Girth.transpose
data.Girth.transpose()
data[["Girth"]]
data[["Girth"]].shape
mdl.fit(data[["Girth"]], data[["Height"]])
mdl.coef_
data = r.trees
means = np.mean(data, axis = 0)
data["big"] = data.Height > means.Height
sns.scatterplot(data = data, x= "Girth", y= "Height", hue = "big")
sns.set_theme(color_codes=True)
plt.show()
from sklearn.linear_model import LinearRegression
mdl = LinearRegression()
mdl.fit(data[["Girth"]], data[["Height"]])
print(mdl.coef_)
quit
quit
print(py$means)
print(py$mdl)
py$data %>%
ggplot(aes(x = Girth, y = Height, colour = big)) +
geom_point()
py$mdl$coef_
py$mdl$intercept_
library(reticulate)
library(tidyverse)
data(trees)
glimpse(trees)
reticulate::repl_python()
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
data = r.trees
means = np.mean(data, axis = 0)
data["big"] = data.Height > means.Height
sns.scatterplot(data = data, x= "Girth", y= "Height", hue = "big")
sns.set_theme(color_codes=True)
plt.show()
from sklearn.linear_model import LinearRegression
mdl = LinearRegression()
mdl.fit(data[["Girth"]], data[["Height"]])
print(mdl.coef_)
quit
library(reticulate)
library(tidyverse)
data(trees)
stop_serve()
glimpse(trees)
stop_server()
serve_site()
