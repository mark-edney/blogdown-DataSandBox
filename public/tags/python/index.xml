<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on The Data Sandbox</title>
    <link>https://datasandbox.netlify.app/tags/python/</link>
    <description>Recent content in Python on The Data Sandbox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 May 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://datasandbox.netlify.app/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The beauty of List comprehensions in Python</title>
      <link>https://datasandbox.netlify.app/post/2022-05-16-the-beauty-of-list-comprehensions-in-python/</link>
      <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-05-16-the-beauty-of-list-comprehensions-in-python/</guid>
      <description>


&lt;p&gt;I have spent awhile learning Python, and I was a little perplexed when it came to list comprehensions. Why would you use them? Isn’t there just an easier why?&lt;/p&gt;
&lt;p&gt;As my proficiency increase, I have found them to be an incredibly useful tool. They save you lines of code, are easy to understand, and are usually better for performance. A good list comprehension, is truly a work of beauty.&lt;/p&gt;
&lt;div id=&#34;structure&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Structure&lt;/h2&gt;
&lt;p&gt;The basic structure of a list comprehension is pretty simple, you contain an expression and an iterable within a set of &lt;code&gt;[]&lt;/code&gt;. Depending on the type of brackets used, you can create a list, a generator, set or a dictionary.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;[i for i in range(5)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0, 1, 2, 3, 4]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;(i for i in range(5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## &amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x000000002B116430&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;{i for i in range(5)}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {0, 1, 2, 3, 4}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It may appear from first impressions that a list comprehension is a simple one line for loop, but it is much more powerful than that.&lt;/p&gt;
&lt;div id=&#34;conditions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conditions&lt;/h3&gt;
&lt;p&gt;Much more complicated lists can be created with an included if statement. The if statement fits right at the end of the statement.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;[a for a in range(10) if a % 2 == 0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0, 2, 4, 6, 8]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But what if you need to create an even more complicated list, one that requires an else statement along with the if statement. Then the structure of the list comprehension changes a little, the iterable statement is moved to the end.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;[a if a % 2 == 0 else 0 for a in range(10)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0, 0, 2, 0, 4, 0, 6, 0, 8, 0]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;expressions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Expressions&lt;/h3&gt;
&lt;p&gt;Of course, expressions can be more complicated than returning single values. One common issue I find is when I have a list of a value type and I need them to be of a different type. This conversion is easy with list comprehensions.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = [&amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;]
[int(x) for x in a]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0, 1, 2, 3, 4]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is nearly an unlimited potential of different expressions you can use.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;more-iterables&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;More Iterables&lt;/h3&gt;
&lt;p&gt;List comprehensions are not limited to a single iterable. Far warning, however, increasing the number of iterables will reduce readability. At some level of complication, it will be a better idea to separate steps.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = range(5)
b = [5,10,15]
[x*y for x in a for y in b]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0, 0, 0, 5, 10, 15, 10, 20, 30, 15, 30, 45, 20, 40, 60]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results are an element-wise evaluation across multiple iterables. These iterables don’t need to be the same size.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;dictionary-comprehensions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Dictionary Comprehensions&lt;/h3&gt;
&lt;p&gt;As previously mentioned, by changing the structure, we can generate dictionaries.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;{char : num for num, char in enumerate([&amp;#39;a&amp;#39;,&amp;#39;b&amp;#39;,&amp;#39;c&amp;#39;,&amp;#39;d&amp;#39;,&amp;#39;e&amp;#39;])}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## {&amp;#39;a&amp;#39;: 0, &amp;#39;b&amp;#39;: 1, &amp;#39;c&amp;#39;: 2, &amp;#39;d&amp;#39;: 3, &amp;#39;e&amp;#39;: 4}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Likewise, you can create a set rather than a list. Sets can be useful if you don’t need the data to be in order, and you don’t want any duplicate values.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;other-applications&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Other Applications&lt;/h3&gt;
&lt;p&gt;There is great potential in list comprehensions. Often I find that I need to create a list of zeroes or of boolean logic of the same size as a current list. This is easy to create, just don’t refer to the iterable within the expression.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;a = range(5)
[True for x in a]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [True, True, True, True, True]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While it may not be best practice, you can nest a list comprehension within another list comprehension.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;[x for x in [b for b in range(20) if b %2 == 0] if x %3 == 0]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [0, 6, 12, 18]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;Hopefully I have won you over with the beauty of list comprehensions. They are simple and clean to create yet extremely flexible in their design. So take a minute, to really appreciate the beauty of list comprehensions.&lt;/p&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@kellysikkema?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Kelly Sikkema&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/lists?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
      
            <category>Python</category>
      
      
            <category>How-to</category>
      
    </item>
    
    <item>
      <title>Formatting our output with Python&#39;s F strings</title>
      <link>https://datasandbox.netlify.app/post/2022-05-09-formatting-our-outout-with-python-s-f-strings/</link>
      <pubDate>Mon, 09 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-05-09-formatting-our-outout-with-python-s-f-strings/</guid>
      <description>


&lt;p&gt;I have recently been on a tear of different challenges on the site &lt;a href=&#34;hackerrank.com&#34;&gt;HackerRank&lt;/a&gt;. I am about halfway through their 30 days of code and 10 days of statistics. These challenges often require to output number to a certain a number of significant digits. I’ve always thought that the &lt;code&gt;round&lt;/code&gt; function can be used for this, but I am wrong. The F string seems to be a powerful tool to accomplish this, and worth your time learning if you are unfamiliar.&lt;/p&gt;
&lt;div id=&#34;structure-of-an-f-string&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Structure of an F string&lt;/h2&gt;
&lt;p&gt;The formatting of an F string starts with a &lt;code&gt;f&lt;/code&gt; prior to quotations, whether they be single or double quotes. Any variable can then be included within a series of &lt;code&gt;{}&lt;/code&gt;. This formatting can make it easier than turning values into strings and concatenating all strings into a single line of text. This is easily demonstrated with a large mix of values and strings.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;x = 1/3
y = 1/6

print(&amp;quot;The value is &amp;quot; + str(x) + &amp;quot; is greater than &amp;quot; + str(y))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The value is 0.3333333333333333 is greater than 0.16666666666666666&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(f&amp;quot;The value is {x} is greater than {y}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The value is 0.3333333333333333 is greater than 0.16666666666666666&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The values can then be formatted with &lt;code&gt;:&lt;/code&gt; after the variable name. The number of digits prior and post the decimal can then be specified. The &lt;code&gt;f&lt;/code&gt; is added after the decimal formatting to ensure the value is treated as a float.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(f&amp;quot;The value is {x:.3f} is greater than {y:.2f}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The value is 0.333 is greater than 0.17&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The values passed are not specific to the number of digits, but the minimum number of spaces. This means you can ensure specific space aligned, such as for a table, by including these values.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;z = [10000, 500, 10, 0.001, .1]
for i in z:
        print(f&amp;quot;the value is: {i:5}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## the value is: 10000
## the value is:   500
## the value is:    10
## the value is: 0.001
## the value is:   0.1&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additionally, we can add leading zeros by adding zero prior to the number of digits.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;for i in z:
        print(f&amp;quot;the value is: {i:05}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## the value is: 10000
## the value is: 00500
## the value is: 00010
## the value is: 0.001
## the value is: 000.1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;alternative-formatting&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Alternative formatting&lt;/h2&gt;
&lt;p&gt;There are a few alternative methods for f strings. From my understanding, they are not as fast when it comes to performance. I don’t think that is of particular importance. If your script needs a high level of performance, than you probably don’t want many print statements.&lt;/p&gt;
&lt;div id=&#34;format-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Format Method()&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;format&lt;/code&gt; method is very similar to &lt;code&gt;f strings&lt;/code&gt; with the use of the &lt;code&gt;{}&lt;/code&gt;. The string is not preceded by f and the &lt;code&gt;{}&lt;/code&gt; can remain empty or contain position indexing. The values are then added in the &lt;code&gt;.format&lt;/code&gt; function after the string. The order of the variable in the string will correspond with the number used in the &lt;code&gt;{}&lt;/code&gt;, if used at all.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;The value is {} is greater than {}&amp;quot;.format(1/3, 1/6))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The value is 0.3333333333333333 is greater than 0.16666666666666666&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;old-method&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Old % Method&lt;/h3&gt;
&lt;p&gt;The Old % operator (modulo) replaces the value in the string. Formatting details, such as those previously discussed, are entered after the &lt;code&gt;%&lt;/code&gt;. The variables or values are then entered after the string when preceded by another &lt;code&gt;%&lt;/code&gt;. Multiple values can be passed.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(&amp;quot;The value is %5.3f is greater than %5.3f&amp;quot; %(x,y))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The value is 0.333 is greater than 0.167&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Whichever method you decide, it probably won’t make a huge difference. The important part is to understand is the actual formatting. F strings also seem to make it easier to understand the code, as the actual values are inline with the string and the formatting.&lt;/p&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@sigmund?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Sigmund&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/output?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
      
            <category>Python</category>
      
      
            <category>How-to</category>
      
    </item>
    
    <item>
      <title>Level up your programming skills</title>
      <link>https://datasandbox.netlify.app/post/2022-05-01-level-up-your-progamming-skills/</link>
      <pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-05-01-level-up-your-progamming-skills/</guid>
      <description>


&lt;p&gt;How do you become a better programmer? Well, there is strong scientific evidence for the support of the principle of deliberate practice. Deliberate practice is a method of skill development first written by Anders Ericsson in the book “Peak: Secrets from the New Science of Expertise”. I would also recommend reading “Talent Is Overrated: What Really Separates World-Class Performers from Everybody Else” by Geoff Colvin.&lt;/p&gt;
&lt;div id=&#34;deliberate-practice&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Deliberate Practice&lt;/h2&gt;
&lt;p&gt;Deliberate Practice can be summarized to the following points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Talent is not enough, and to become great at a task requires a lot of practice and repetition.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deliberate practice is hard-work, in order strengthen your skills through practice you need to be challenged. This means that repetition by itself will not develop skill. This also means you need to constantly increase the challenge of your practice as you become better at it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Focus plays a large role in deliberate practice. This connects to the previous point for the required challenge of practice. This can also tie into the principles of flow, as best described by Mihaly Csikszentmihalyi in his book “Flow: The Psychology of Optimal Experience”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Setting goals becomes a powerful motivator. With the completion of a goal, there is a release of endorphins, which cause a sense of satisfaction. Goals are can also be utilized to increase the difficulty of practice, making an otherwise easy task a challenge.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Feedback is important. Feedback provides motivation by comparing current to previous performance.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;application-for-programmers&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Application for programmers&lt;/h2&gt;
&lt;p&gt;So, how can programmers incorporate the principles of deliberate practice? I’ve recently been recommended the site &lt;a href=&#34;https://www.hackerrank.com&#34;&gt;Hacker Rank&lt;/a&gt; and I can say it is fantastic.
The Hacker Rank site provides a wide array of challenges for programmers of varying skills levels. There is a selection of different topics from Algorithms to Regular Expressions.&lt;/p&gt;
&lt;p&gt;So how does Hacker Rank fit in with deliberate practice? Well, there certainly are a good level of challenges to work through. There a three different levels per topic, with challenges in the same difficulty having nothing in common.&lt;/p&gt;
&lt;p&gt;The design of the site is quite simple, with very little to distract you from your challenge. There is the option for a dark theme if you are, like me, a person of sophistication. It also pretty easy to have the problem on one side of your screen with your programming on the other.&lt;/p&gt;
&lt;p&gt;There are multiple built-in goals to work on. Certifications for each topic to test your current skill level and to advertise to potential employers. There a preparation kits for interviews with time frames between 1 and 12 weeks, which ever is most convenient for you.&lt;/p&gt;
&lt;p&gt;There is immediate feedback from assignments, with automated program testing. A leader board is provided for the most competitive, who are interested in their global ranking. You also get feedback from the built-in IDE on your programming errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;site-criticisms&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Site Criticisms&lt;/h2&gt;
&lt;p&gt;I do enjoy the site, but I still have some minor issues. To its credit, the site does support multiple programming languages, even different versions of the same programming language. This does, however, make it difficult to following along with the tutorials if they are done in a language that you are not familiar with.&lt;/p&gt;
&lt;p&gt;Also, at this time, there doesn’t seem to be support to retake certification exams for some topics. I myself, had failed the R basic certification as I am more used to using the &lt;code&gt;tidyverse&lt;/code&gt; package rather than base &lt;code&gt;R&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I can’t really speak on behalf of the incorporation of potential employers in it. But that does seem like a very promising idea. I still think it is a great to tool for the programming community, and I will continue to utilize it for my personal skill development, as it can easily provide a source of deliberate practice.&lt;/p&gt;
&lt;/div&gt;
</description>
      
            <category>Python</category>
      
            <category>R</category>
      
      
            <category>General</category>
      
    </item>
    
    <item>
      <title>Merging PDFs with Python</title>
      <link>https://datasandbox.netlify.app/post/2022-04-14-merging-pdfs-with-python/</link>
      <pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-04-14-merging-pdfs-with-python/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-04-14-merging-pdfs-with-python/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I am currently looking for a new job, which means I need to create many resumes and cover letters. When creating a resume, it is good practice to create a PDF file. PDFs cannot be edited, which can make them difficult to work with, but they retain their formatting. It is impossible to tell which version of Microsoft Word a hiring manager is using. So you have to risk a possible formatting error or create a compatible resumes without the latest features.&lt;/p&gt;
&lt;p&gt;One issue with using PDFs is that employers will sometimes ask for a cover letter and resume to be submitted as a single PDF. This wouldn’t be an issue if they were both stored in the same document, but if you are like me, you have separate documents creating separate PDFs. You can always use free online PDF mergers, but they can have limitations, and it may not be desirable to give away your personal data. So I decided to create a small Python script that will merge my PDFs together.&lt;/p&gt;
&lt;p&gt;The script will require the &lt;code&gt;PyPDF2&lt;/code&gt; package for dealing with PDFs and the &lt;code&gt;os&lt;/code&gt; package. The &lt;code&gt;os&lt;/code&gt; package is just used to automatically merge all PDFs in the root folder.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import PyPDF2, os&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first step is to create a list of the PDFs in the current folder. It also ensures that the merged PDF is not in the list.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;pdfiles = []

for filename in os.listdir(&amp;#39;.&amp;#39;):
        if filename.endswith(&amp;#39;.pdf&amp;#39;):
                if filename != &amp;#39;merged.pdf&amp;#39;:
                        pdfiles.append(filename)
                        
pdfiles.sort(key = str.lower)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The file list is also sorted alphabetically to ensure the results are predictable and easy to control. The merged PDF will contain the PDFs in the same order.&lt;/p&gt;
&lt;p&gt;The next step is to create a &lt;code&gt;PdfFileMerger&lt;/code&gt; object, which will be the destination for all the data in the PDFs. The first step is to open the first PDF file in the PDF file list. The &lt;code&gt;PdfFileMerger&lt;/code&gt; object will only accept a file object, so we need to create a &lt;code&gt;PdfFileReader&lt;/code&gt; object from the opened PDF. This &lt;code&gt;PdfFileReader&lt;/code&gt; object will then be appended to the &lt;code&gt;PdfFileMerger&lt;/code&gt; object. We proceed then to the next PDF. After all files are added, the write method is used on the merged object to create a merged PDF.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;pdfMerge = PyPDF2.PdfFileMerger()

for filename in pdfiles:
        pdfFile = open(filename, &amp;#39;rb&amp;#39;)
        pdfReader = PyPDF2.PdfFileReader(pdfFile)
        pdfMerge.append(pdfReader)

pdfFile.close()
pdfMerge.write(&amp;#39;merged.pdf&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that’s everything, a simple Python script that creates a merged PDF from all PDFs in the root folder. It is important to remember that a PDF file needs to be opened, and then a file object can be created. Using the regular PDF file will not work.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@krakenimages?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;krakenimages&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/union?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
            <category>Python</category>
      
      
            <category>How-to</category>
      
    </item>
    
    <item>
      <title>Simple Neural Networks in Python</title>
      <link>https://datasandbox.netlify.app/post/2022-03-20-simple-neural-networks-in-python/</link>
      <pubDate>Sun, 20 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-03-20-simple-neural-networks-in-python/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-03-20-simple-neural-networks-in-python/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Neural Networks (NN) have become incredibly popular due to their high level of accuracy. The creation of a NN can be complicated and have a high level of customization. I wanted to explore just the simplest NN that you could create. A framework as a workhorse for developing new NN.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;SciKitlearn&lt;/code&gt; provides the easiest solution with the Multi-Layer Perceptron series of functions. It doesn’t provide a bunch of the more advanced features of &lt;code&gt;TensorFlow&lt;/code&gt;, like GPU support, but that is not what I’m looking for.&lt;/p&gt;
&lt;div id=&#34;initialization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Initialization&lt;/h2&gt;
&lt;p&gt;For the demonstration, I decided to use a data set on faults found in &lt;a href=&#34;https://www.openml.org/d/1504&#34;&gt;steel plates&lt;/a&gt; from the OpenML website. The data set includes 27 features with 7 binary predictors.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split

df = pd.read_csv(&amp;#39;https://www.openml.org/data/get_csv/1592296/php9xWOpn&amp;#39;)

predictors = [&amp;#39;V28&amp;#39;, &amp;#39;V29&amp;#39;, &amp;#39;V30&amp;#39;, &amp;#39;V31&amp;#39;, &amp;#39;V32&amp;#39;, &amp;#39;V33&amp;#39;, &amp;#39;Class&amp;#39;]
df[&amp;#39;Class&amp;#39;] -= 1 &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since there are multiple binary predictors, I needed to create a single class variable to represent each class. The &lt;code&gt;Class&lt;/code&gt; variable doesn’t currently represent this, it represents all faults that don’t fit in the categories of &lt;code&gt;V28&lt;/code&gt; to &lt;code&gt;V33&lt;/code&gt;. The single variable class was created with the &lt;code&gt;np.argmax&lt;/code&gt; function which returns the index of the highest value between all the predictors.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;y = np.argmax(df[predictors].values, axis =1)
X = df.drop(predictors, axis = 1)
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;modelling&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Modelling&lt;/h2&gt;
&lt;p&gt;This is the most basic model that I would like to evaluate. I’ve used the &lt;code&gt;GridSearch&lt;/code&gt; function, so all combinations of parameters are tested. The only parameter I wanted to examine was the size of the hidden layers. Each hidden layer provided is a tuple, where each number represents the number of nodes in a singled layer. Multiple numbers represent additional layers.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from sklearn.neural_network import MLPClassifier
from sklearn.model_selection import GridSearchCV

parameters = {&amp;#39;hidden_layer_sizes&amp;#39;:[(1),(100), (100,100), (100,100,100), 
(100,100,100,100), 
(100,100,100,100,100), 
(100,100,100,100,100,100), 
(100,100,100,100,100,100,100),
(100,100,100,100,100,100,100,100),
(100,100,100,100,100,100,100,100,100),
(100,100,100,100,100,100,100,100,100,100)]}
model = MLPClassifier(random_state = 1,max_iter = 10000, 
solver = &amp;#39;adam&amp;#39;, learning_rate = &amp;#39;adaptive&amp;#39;)

grid = GridSearchCV(estimator = model, param_grid = parameters)
grid.fit(X_train, y_train)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GridSearchCV(estimator=MLPClassifier(learning_rate=&amp;#39;adaptive&amp;#39;, max_iter=10000,
##                                      random_state=1),
##              param_grid={&amp;#39;hidden_layer_sizes&amp;#39;: [1, 100, (100, 100),
##                                                 (100, 100, 100),
##                                                 (100, 100, 100, 100),
##                                                 (100, 100, 100, 100, 100),
##                                                 (100, 100, 100, 100, 100, 100),
##                                                 (100, 100, 100, 100, 100, 100,
##                                                  100),
##                                                 (100, 100, 100, 100, 100, 100,
##                                                  100, 100),
##                                                 (100, 100, 100, 100, 100, 100,
##                                                  100, 100, 100),
##                                                 (100, 100, 100, 100, 100, 100,
##                                                  100, 100, 100, 100)]})&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(grid.best_score_)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0.4213058419243986&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The performance of the best model in the grid is not impressive. It took me awhile to realize that I had forgotten to scale the features. I included this error to show the importance of scaling on model performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;feature-scaling&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Feature Scaling&lt;/h2&gt;
&lt;p&gt;The features are simply scaled with the &lt;code&gt;StandardScaler&lt;/code&gt; function. The same model is used on the scaled features.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from sklearn.preprocessing import StandardScaler

sc = StandardScaler()
scaler = sc.fit(X_train)
X_train_sc = scaler.transform(X_train)
X_test_sc = scaler.transform(X_test)

parameters = {&amp;#39;hidden_layer_sizes&amp;#39;:[(1),(100), (100,100), (100,100,100), 
(100,100,100,100), 
(100,100,100,100,100), 
(100,100,100,100,100,100), 
(100,100,100,100,100,100,100),
(100,100,100,100,100,100,100,100),
(100,100,100,100,100,100,100,100,100),
(100,100,100,100,100,100,100,100,100,100)]}
model = MLPClassifier(random_state = 1,max_iter = 10000, 
solver = &amp;#39;adam&amp;#39;, learning_rate = &amp;#39;adaptive&amp;#39;)

grid = GridSearchCV(estimator = model, param_grid = parameters, cv=3)
grid.fit(X_train_sc, y_train)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## GridSearchCV(cv=3,
##              estimator=MLPClassifier(learning_rate=&amp;#39;adaptive&amp;#39;, max_iter=10000,
##                                      random_state=1),
##              param_grid={&amp;#39;hidden_layer_sizes&amp;#39;: [1, 100, (100, 100),
##                                                 (100, 100, 100),
##                                                 (100, 100, 100, 100),
##                                                 (100, 100, 100, 100, 100),
##                                                 (100, 100, 100, 100, 100, 100),
##                                                 (100, 100, 100, 100, 100, 100,
##                                                  100),
##                                                 (100, 100, 100, 100, 100, 100,
##                                                  100, 100),
##                                                 (100, 100, 100, 100, 100, 100,
##                                                  100, 100, 100),
##                                                 (100, 100, 100, 100, 100, 100,
##                                                  100, 100, 100, 100)]})&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;grid.best_score_&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0.7553264604810996&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The performance of the scaled model is much more impressive. After the &lt;code&gt;GridSearch&lt;/code&gt; function finds the parameters for the best model, it retrains the model on the entire dataset. This is because the function utilize cross validation, so some data was withheld for comparing the different models on test data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With our model constructed, we can now test its performance on the original test set. It is important to remember to use the scaled test features, as that is what the model is expecting.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;grid.score(X_test_sc, y_test)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 0.7304526748971193&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results are pretty satisfactory. A decent level of accuracy without a lot of complicated code. Default values were used, whenever they were appropriate. Additional steps could be taken, but this remains a good foundation for future exploratory analysis.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@alinnnaaaa?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Alina Grubnyak&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/neural-networks?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</description>
      
            <category>Python</category>
      
            <category>NN</category>
      
      
            <category>How-to</category>
      
    </item>
    
    <item>
      <title>Python in R Markdown</title>
      <link>https://datasandbox.netlify.app/post/2022-03-03-python-in-r-markdown/</link>
      <pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-03-03-python-in-r-markdown/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-03-03-python-in-r-markdown/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@davidclode?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;David Clode&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/python?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The main advantage of using the R Markdown format is the utility of running R code within the text. This is clearly more advantageous than just writing code in a Markdown file. R
Markdown is however limited to R code, unable to run Python scripts. The R library &lt;code&gt;reticulate&lt;/code&gt; looks to add this capability.&lt;/p&gt;
&lt;div id=&#34;initial-setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Initial Setup&lt;/h2&gt;
&lt;p&gt;The initial setup requires the installation of the &lt;code&gt;reticulate&lt;/code&gt; library, after installation you shouldn’t need to call it, but I do in the preceding code. I have loaded the &lt;code&gt;trees&lt;/code&gt; dataset as a test dataset and the tidyverse library just to explore the data a bit.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reticulate)
library(tidyverse)
data(trees)
glimpse(trees)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 31
## Columns: 3
## $ Girth  &amp;lt;dbl&amp;gt; 8.3, 8.6, 8.8, 10.5, 10.7, 10.8, 11.0, 11.0, 11.1, 11.2, 11.3, ~
## $ Height &amp;lt;dbl&amp;gt; 70, 65, 63, 72, 81, 83, 66, 75, 80, 75, 79, 76, 76, 69, 75, 74,~
## $ Volume &amp;lt;dbl&amp;gt; 10.3, 10.3, 10.2, 16.4, 18.8, 19.7, 15.6, 18.2, 22.6, 19.9, 24.~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, R Studio will use your local version of Python when you write any code in a code chuck labelled with the “{Python}” header. If you don’t have any local version, R Studio will ask if you would like to install Miniconda. From here, you will need to start downloading the required Python modules.&lt;/p&gt;
&lt;p&gt;Modules can be downloaded with the &lt;code&gt;pip&lt;/code&gt; python package installer from the terminal or command line. The easiest method in R Studio is within the terminal window next to the console window. The command used is &lt;code&gt;pip install &#34;module name&#34;&lt;/code&gt;. Some modules can be tricky and won’t work if not installed after other modules.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;multiple-environments&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Multiple Environments&lt;/h2&gt;
&lt;p&gt;After the setup, you should see some additional options in the environment in R Studio. You should see that you have the option to switch between the R and Python environments.&lt;/p&gt;
&lt;p&gt;Data is transitioned from the R environment to the Python environment with the &lt;code&gt;r&lt;/code&gt; variable. This method should pretty similar to the Shiny Apt’s use of &lt;code&gt;input\output&lt;/code&gt;. It is not only data that can move between environments, but functions too.&lt;/p&gt;
&lt;p&gt;The following code takes data from the R environment and creates a plot in &lt;code&gt;Seaborn&lt;/code&gt;. The mean values of the columns are calculated in &lt;code&gt;python&lt;/code&gt; to be imported into the R environment. A simple linear model is created with the &lt;code&gt;SKlearn&lt;/code&gt; module.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data = r.trees
means = np.mean(data, axis = 0)
data[&amp;quot;big&amp;quot;] = data.Height &amp;gt; means.Height 
sns.scatterplot(data = data, x= &amp;quot;Girth&amp;quot;, y= &amp;quot;Height&amp;quot;, hue = &amp;quot;big&amp;quot;)
sns.set_theme(color_codes=True)
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://datasandbox.netlify.app/post/2022-03-03-python-in-r-markdown/index.en_files/figure-html/enviroment-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from sklearn.linear_model import LinearRegression
mdl = LinearRegression()
mdl.fit(data[[&amp;quot;Girth&amp;quot;]], data[[&amp;quot;Height&amp;quot;]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## LinearRegression()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(mdl.coef_)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1.05436881]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data is transitioned from &lt;code&gt;Python&lt;/code&gt; to, &lt;code&gt;R&lt;/code&gt; similarly with the variable &lt;code&gt;py&lt;/code&gt;. Information on models can be passed but not the models themselves. This is important if you are more comfortable creating models in &lt;code&gt;Python&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(py$means)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Girth   Height   Volume 
## 13.24839 76.00000 30.17097&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(py$mdl$intercept_)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 62.03131&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;py$data %&amp;gt;%
        ggplot(aes(x = Girth, y = Height, colour = big)) +
        geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://datasandbox.netlify.app/post/2022-03-03-python-in-r-markdown/index.en_files/figure-html/return-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
      
            <category>R</category>
      
            <category>Python</category>
      
            <category>Rmarkdown</category>
      
      
            <category>How-to</category>
      
    </item>
    
  </channel>
</rss>