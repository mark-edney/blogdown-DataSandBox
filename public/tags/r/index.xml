<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on The Data Sandbox</title>
    <link>https://datasandbox.netlify.app/tags/r/</link>
    <description>Recent content in R on The Data Sandbox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 11 Apr 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://datasandbox.netlify.app/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>R-Bloggers site</title>
      <link>https://datasandbox.netlify.app/post/2022-04-11-r-bloggers-site/</link>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-04-11-r-bloggers-site/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-04-11-r-bloggers-site/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I would like to take the time to mention the &lt;a href=&#34;https://www.google.com/url?q=http://r-bloggers.com&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1649728986132366&amp;amp;usg=AOvVaw2vAkyuJT7uhjS9BQpH-Upw&#34;&gt;r-bloggers&lt;/a&gt; site. It is a vast collection of Blogs on everything that has to do will the R language. I would very much like to contribute to their work with this blog.&lt;/p&gt;
&lt;p&gt;Just to keep it interesting, I would like to recommend this specific post by &lt;a href=&#34;https://www.r-bloggers.com/2022/04/upcoming-r-conferences-2022/&#34;&gt;The Jumping Rivers Blog&lt;/a&gt; about upcoming R conferences. I’ve attended a few digital R Conferences, hosted by R-Studio, and they are very rewarding experiences. They have the ability to both inspire and educate. Unfortunately, there are no conferences in my native Canada.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@andrewtneel?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Andrew Neel&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/bloggers?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      
            <category>r</category>
      
      
            <category>General</category>
      
    </item>
    
    <item>
      <title>Underrated CRAN Packages</title>
      <link>https://datasandbox.netlify.app/post/2022-03-31-underrated-cran-packages/</link>
      <pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-03-31-underrated-cran-packages/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-03-31-underrated-cran-packages/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I sit here looking for inspiration, nothing interesting to write about. Perhaps there are some popular R packages on CRAN that I don’t know about? You can explore the data on downloads from CRAN with the &lt;code&gt;cranlogs&lt;/code&gt; package.&lt;/p&gt;
&lt;div id=&#34;top-cran-downloads&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Top CRAN downloads&lt;/h2&gt;
&lt;p&gt;With the following code we can get the most popular packages from CRAN. The CRAN directory doesn’t represent all R packages but a good amount of them.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(cranlogs)
top100 &amp;lt;- cran_top_downloads(when = &amp;#39;last-month&amp;#39;, count = 100)
top100 %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   rank package   count       from         to
## 1    1 ggplot2 2344057 2022-03-04 2022-04-02
## 2    2   rlang 2239228 2022-03-04 2022-04-02
## 3    3    glue 1800420 2022-03-04 2022-04-02
## 4    4      sf 1704701 2022-03-04 2022-04-02
## 5    5     cli 1665769 2022-03-04 2022-04-02
## 6    6   dplyr 1665023 2022-03-04 2022-04-02&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this list, we can see that the &lt;code&gt;tidyverse&lt;/code&gt; represents a large amount of the top downloads with &lt;code&gt;ggplot2&lt;/code&gt;, &lt;code&gt;rlang&lt;/code&gt; and &lt;code&gt;dplyr&lt;/code&gt;. The list includes the &lt;code&gt;sf&lt;/code&gt; package for geo-spacial data, the &lt;code&gt;glue&lt;/code&gt; package for string manipulation and the &lt;code&gt;cli&lt;/code&gt; package which is used to create a command line interface for packages. Most of these packages I already have a good understanding of, so I need to narrow down the search.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;packages-installed&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Packages installed&lt;/h2&gt;
&lt;p&gt;You can get a list of your installed packages with the installed_packages function. You can than filter the top 100 list and remove anything you already have installed to find new packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mine &amp;lt;- installed.packages() %&amp;gt;%
        data.frame() %&amp;gt;%
        select(Package)
new &amp;lt;- top100 %&amp;gt;%
        filter(!package %in% mine$Package)
new&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   rank   package   count       from         to
## 1   17      ragg 1161019 2022-03-04 2022-04-02
## 2   21       rgl 1148721 2022-03-04 2022-04-02
## 3   23     rgeos 1128166 2022-03-04 2022-04-02
## 4   38       zoo  832762 2022-03-04 2022-04-02
## 5   48   pkgdown  766019 2022-03-04 2022-04-02
## 6   81    nloptr  565042 2022-03-04 2022-04-02
## 7   88     Hmisc  542890 2022-03-04 2022-04-02
## 8   89      lme4  538878 2022-03-04 2022-04-02
## 9   93 RcppEigen  513045 2022-03-04 2022-04-02&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From some quick research, I have found the following about the new packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ragg&lt;/code&gt; - a 2D library as an alternative to the RStudio default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rgl&lt;/code&gt; - functions for 3D interactive graphics&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rgeos&lt;/code&gt; - a geometry package but is currently planned to be retired at the end of 2023 for the &lt;code&gt;sf&lt;/code&gt; package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zoo&lt;/code&gt; - a library to deal with time series&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkgdown&lt;/code&gt; - a library fro building blog website, I use blogdown&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nloptr&lt;/code&gt; - a library for solving non-linear optimization problems&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Hmisc&lt;/code&gt; - an assortment of different data analysis tools&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lme4&lt;/code&gt; - for fitting linear and generalized linear mixed-effects models&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RcppEigen&lt;/code&gt; - integration of the &lt;code&gt;eigen&lt;/code&gt; library in R for linear algebra&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;take-away&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Take-away&lt;/h2&gt;
&lt;p&gt;Hopefully your take-way is a simple method to explore R library that you have never heard about. I know that a few of the libraries seem interesting and worth further exploring.&lt;/p&gt;
&lt;p&gt;While we are at it, might as well find the daily values for the new packages and plot them for the last month.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;new$package %&amp;gt;%
        cran_downloads(when = &amp;quot;last-month&amp;quot;) %&amp;gt;%
        ggplot(aes(x = date, y = count, color = package)) +
        geom_line()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://datasandbox.netlify.app/post/2022-03-31-underrated-cran-packages/index.en_files/figure-html/plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
      
            <category>R</category>
      
      
            <category>Project</category>
      
    </item>
    
    <item>
      <title>Making the Connection with Crosstalk</title>
      <link>https://datasandbox.netlify.app/post/2022-03-18-making-the-connection-with-crosstalk/</link>
      <pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-03-18-making-the-connection-with-crosstalk/</guid>
      <description> 

&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-03-18-making-the-connection-with-crosstalk/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;I recently wrote a post about &lt;a href=&#34;https://datasandbox.netlify.app/post/2022-03-10-creating-dashboard-in-r/&#34;&gt;creating dashboards in R&lt;/a&gt; which was based on the &lt;code&gt;Flexdashboard&lt;/code&gt; library. My largest criticism was the lack of communication between visualizations on the same dashboard. This was before I learned about the &lt;code&gt;Crosstalk&lt;/code&gt; package which adds this feature to html widgets, such as the Flexdashboard, to at least a limited degree.&lt;/p&gt;
&lt;div id=&#34;initialization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Initialization&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Crosstalk&lt;/code&gt; package is available on CRAN and is loaded along with other important packages for this demonstration.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;crosstalk&amp;quot;)
library(crosstalk)
library(tidyverse)
library(flexdashboard)
library(plotly)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have decided to use a Toronto Open dataset about city audits for apartment buildings. I limited the features to only the ones that I feel will be interesting to look at. More information about the data set can be found &lt;a href=&#34;https://open.toronto.ca/dataset/apartment-building-evaluation/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;download.file(&amp;quot;https://ckan0.cf.opendata.inter.prod-toronto.ca/dataset/4ef82789-e038-44ef-a478-a8f3590c3eb1/resource/979fb513-5186-41e9-bb23-7b5cc6b89915/download/Apartment%20Building%20Evaluation.csv&amp;quot;, &amp;quot;data.csv&amp;quot;)
df &amp;lt;- read_csv(&amp;quot;data.csv&amp;quot;) %&amp;gt;%
        select(lng = LONGITUDE, 
               lat = LATITUDE, 
               SCORE, 
               YEAR_BUILT, 
               SITE_ADDRESS, 
               PROPERTY_TYPE) %&amp;gt;% 
        slice_sample(n = 200)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The key to the &lt;code&gt;crosstalk&lt;/code&gt; library is the &lt;code&gt;SharedData&lt;/code&gt; functions. An object is created when a Data Frame is passed to the &lt;code&gt;SharedData$new&lt;/code&gt; function. This is what enables communication between plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;shared_df &amp;lt;- SharedData$new(df)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;dashboard-creation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Dashboard Creation&lt;/h2&gt;
&lt;p&gt;The dashboard is created pretty much as previous mentioned in &lt;a href=&#34;https://datasandbox.netlify.app/post/2022-03-10-creating-dashboard-in-r/&#34;&gt;my dashboard post&lt;/a&gt;, with the exception that the shared Data Frame object is passed rather than the Data Frame.&lt;/p&gt;
&lt;p&gt;The dashboard can include filters that are very similar to the Shiny Apt filters, with the &lt;code&gt;filter_*&lt;/code&gt; family of functions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;filter_slider(&amp;quot;Score&amp;quot;, &amp;quot;SCORE&amp;quot;, shared_df, ~SCORE, round = TRUE)
filter_checkbox(&amp;quot;Property Type&amp;quot;, &amp;quot;PROPERTY_TYPE&amp;quot;, shared_df, ~PROPERTY_TYPE, inline = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Crosstalk&lt;/code&gt; package does add some significant connectivity to Flex Dashboards. It is relatively simple to use with some basic functions. It does have the issue of not working with aggregating data. The utility of finding the mean value of a selection is something &lt;code&gt;Tableu&lt;/code&gt; and &lt;code&gt;PowerBI&lt;/code&gt; are still superior at. I think that it is still a welcome improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;final-dashboard&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Final Dashboard&lt;/h2&gt;
&lt;p&gt;&lt;iframe title=&#34;Cross Talk Demo&#34; width=&#34;100%&#34; height=&#34;500&#34; src=&#34;demo1.html&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@jasongoodman_youxventures?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Jason Goodman&lt;/a&gt;on &lt;a href=&#34;https://unsplash.com/s/photos/discussion?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
      
            <category>R</category>
      
            <category>Shiny App</category>
      
            <category>ggplot</category>
      
            <category>Rmarkdown</category>
      
            <category>Leaflet</category>
      
      
            <category>How-to</category>
      
    </item>
    
    <item>
      <title>Creating Dashboards in R</title>
      <link>https://datasandbox.netlify.app/post/2022-03-10-creating-dashboard-in-r/</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-03-10-creating-dashboard-in-r/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-03-10-creating-dashboard-in-r/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Dashboards are a great way to demonstrate knowledge and engage decision makers. Their utility has made PowerBI and
Tableau household names. And while these solutions do support &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;Python&lt;/code&gt; scripts and visualizations, the &lt;code&gt;Flexdashboard&lt;/code&gt; package seeks to compete. The &lt;code&gt;Flexdashboard&lt;/code&gt; packages does this all in &lt;code&gt;R&lt;/code&gt; with the simplicity of writing a &lt;code&gt;R Markdown&lt;/code&gt; file.&lt;/p&gt;
&lt;div id=&#34;initial-setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Initial Setup&lt;/h2&gt;
&lt;p&gt;The setup is simple, you just need to download and load the &lt;code&gt;Flexdashboard&lt;/code&gt; package. With the package installed, the easiest way to start is by creating a new &lt;code&gt;R Markdown&lt;/code&gt; file using the &lt;code&gt;Flexdashboard&lt;/code&gt; template. Loading the &lt;code&gt;Shiny&lt;/code&gt; package is useful if you would like to use interactive plots, but it is not necessary.&lt;/p&gt;
&lt;p&gt;The dashboard can be laid out by either columns or by rows, it doesn’t really make a difference. Just change the text of columns with rows in the following walk-through. A column is set up with “## Column” as the header. The size of the plot region can then be modified with “{data-width=”500”}” in the same header line. The next line should be the plot/area title, which is included with “### Plot Title” header. All that is left is to include a code chunk with your plot.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(flexdashboard)
library(shiny)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sample-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sample Data&lt;/h2&gt;
&lt;p&gt;I decided to demonstrate different dashboard features with a data set from &lt;code&gt;Open Canada&lt;/code&gt; about charitable donations. More information can be found &lt;a href=&#34;https://open.canada.ca/data/en/dataset/74c77af4-73c4-4e0d-ac5d-f74a247cdf12&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;download.file(&amp;quot;https://www150.statcan.gc.ca/n1/tbl/csv/45100007-eng.zip&amp;quot;, &amp;quot;donordata.zip&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;sample-dashboard-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sample Dashboard 1&lt;/h2&gt;
&lt;p&gt;The first dashboard was set up with the default columns layout. It includes an interactive bar chart, an interactive box plot and a pie chart. All the plot were created with &lt;code&gt;GGplot2&lt;/code&gt;, the two plot were made interactive with the &lt;code&gt;GGplotly&lt;/code&gt; function from the &lt;code&gt;Plotly&lt;/code&gt; package. I created a pie chart to demonstrate the use of regular ggplots and because I recently read a complaint about &lt;code&gt;GGplot2&lt;/code&gt; for the creation of Pie charts on Reddit. In my opinion, Pie charts are not very good very conveying information.&lt;/p&gt;
&lt;p&gt;&lt;iframe title=&#34;Demo 1&#34; width=&#34;100%&#34; height=&#34;500&#34; src=&#34;demo1.html&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;sample-dashboard-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Sample Dashboard 2&lt;/h2&gt;
&lt;p&gt;For the second dashboard, I used the row layout. The process is that same with no additional complications. The dashboard features an interactive Leaflet plot, an interactive histogram and data table using the &lt;code&gt;GT&lt;/code&gt; package. The table was transformed with Pivot_Wider function to better fill the space.&lt;/p&gt;
&lt;p&gt;&lt;iframe title=&#34;Demo 2&#34; width=&#34;100%&#34; height=&#34;500&#34; src=&#34;demo2.html&#34;&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;Flexdashboard&lt;/code&gt; package can be used to create nice looking dashboards with a great level of control. The plots can also include interactive elements. When compared to PowerBi or Tableau, there remains one major deficiency. These other dashboards contain a smart interactive filter which ties all the plots together. If you select a specific element in one plot for filtering, all other plots have the same filter applied to them. This is a major boon for understanding data and not a simple feature to develop in &lt;code&gt;Flexdashboard&lt;/code&gt;. It remains an interesting package, but I would still rely on PowerBI or Tableau to create dashboards.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@lukechesser?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Luke Chesser&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/dashboards?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</description>
      
            <category>R</category>
      
            <category>Shiny App</category>
      
            <category>ggplot</category>
      
            <category>Rmarkdown</category>
      
            <category>Leaflet</category>
      
      
            <category>How-to</category>
      
    </item>
    
    <item>
      <title>Python in R Markdown</title>
      <link>https://datasandbox.netlify.app/post/2022-03-03-python-in-r-markdown/</link>
      <pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-03-03-python-in-r-markdown/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-03-03-python-in-r-markdown/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@davidclode?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;David Clode&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/python?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The main advantage of using the R Markdown format is the utility of running R code within the text. This is clearly more advantageous than just writing code in a Markdown file. R
Markdown is however limited to R code, unable to run Python scripts. The R library &lt;code&gt;reticulate&lt;/code&gt; looks to add this capability.&lt;/p&gt;
&lt;div id=&#34;initial-setup&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Initial Setup&lt;/h2&gt;
&lt;p&gt;The initial setup requires the installation of the &lt;code&gt;reticulate&lt;/code&gt; library, after installation you shouldn’t need to call it, but I do in the preceding code. I have loaded the &lt;code&gt;trees&lt;/code&gt; dataset as a test dataset and the tidyverse library just to explore the data a bit.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(reticulate)
library(tidyverse)
data(trees)
glimpse(trees)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Rows: 31
## Columns: 3
## $ Girth  &amp;lt;dbl&amp;gt; 8.3, 8.6, 8.8, 10.5, 10.7, 10.8, 11.0, 11.0, 11.1, 11.2, 11.3, ~
## $ Height &amp;lt;dbl&amp;gt; 70, 65, 63, 72, 81, 83, 66, 75, 80, 75, 79, 76, 76, 69, 75, 74,~
## $ Volume &amp;lt;dbl&amp;gt; 10.3, 10.3, 10.2, 16.4, 18.8, 19.7, 15.6, 18.2, 22.6, 19.9, 24.~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, R Studio will use your local version of Python when you write any code in a code chuck labelled with the “{Python}” header. If you don’t have any local version, R Studio will ask if you would like to install Miniconda. From here, you will need to start downloading the required Python modules.&lt;/p&gt;
&lt;p&gt;Modules can be downloaded with the &lt;code&gt;pip&lt;/code&gt; python package installer from the terminal or command line. The easiest method in R Studio is within the terminal window next to the console window. The command used is &lt;code&gt;pip install &#34;module name&#34;&lt;/code&gt;. Some modules can be tricky and won’t work if not installed after other modules.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;multiple-environments&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Multiple Environments&lt;/h2&gt;
&lt;p&gt;After the setup, you should see some additional options in the environment in R Studio. You should see that you have the option to switch between the R and Python environments.&lt;/p&gt;
&lt;p&gt;Data is transitioned from the R environment to the Python environment with the &lt;code&gt;r&lt;/code&gt; variable. This method should pretty similar to the Shiny Apt’s use of &lt;code&gt;input\output&lt;/code&gt;. It is not only data that can move between environments, but functions too.&lt;/p&gt;
&lt;p&gt;The following code takes data from the R environment and creates a plot in &lt;code&gt;Seaborn&lt;/code&gt;. The mean values of the columns are calculated in &lt;code&gt;python&lt;/code&gt; to be imported into the R environment. A simple linear model is created with the &lt;code&gt;SKlearn&lt;/code&gt; module.&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;data = r.trees
means = np.mean(data, axis = 0)
data[&amp;quot;big&amp;quot;] = data.Height &amp;gt; means.Height 
sns.scatterplot(data = data, x= &amp;quot;Girth&amp;quot;, y= &amp;quot;Height&amp;quot;, hue = &amp;quot;big&amp;quot;)
sns.set_theme(color_codes=True)
plt.show()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://datasandbox.netlify.app/post/2022-03-03-python-in-r-markdown/index.en_files/figure-html/enviroment-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;from sklearn.linear_model import LinearRegression
mdl = LinearRegression()
mdl.fit(data[[&amp;quot;Girth&amp;quot;]], data[[&amp;quot;Height&amp;quot;]])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## LinearRegression()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;python&#34;&gt;&lt;code&gt;print(mdl.coef_)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1.05436881]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data is transitioned from &lt;code&gt;Python&lt;/code&gt; to, &lt;code&gt;R&lt;/code&gt; similarly with the variable &lt;code&gt;py&lt;/code&gt;. Information on models can be passed but not the models themselves. This is important if you are more comfortable creating models in &lt;code&gt;Python&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(py$means)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Girth   Height   Volume 
## 13.24839 76.00000 30.17097&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(py$mdl$intercept_)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 62.03131&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;py$data %&amp;gt;%
        ggplot(aes(x = Girth, y = Height, colour = big)) +
        geom_point()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://datasandbox.netlify.app/post/2022-03-03-python-in-r-markdown/index.en_files/figure-html/return-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
      
            <category>R</category>
      
            <category>Python</category>
      
            <category>Rmarkdown</category>
      
      
            <category>How-to</category>
      
    </item>
    
    <item>
      <title>Bike shares in Toronto</title>
      <link>https://datasandbox.netlify.app/post/2022-02-27-bike-shares-in-toronto/</link>
      <pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-02-27-bike-shares-in-toronto/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-02-27-bike-shares-in-toronto/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@mvdheuvel?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Maarten van den Heuvel&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/toronto-bike?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This article is based on a project written on 01/14/2021&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;bike-rental-shiny-app&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Bike Rental Shiny App&lt;/h2&gt;
&lt;p&gt;This application use the data collected from the &lt;a href=&#34;https://open.toronto.ca/dataset/bike-share-toronto-ridership-data/&#34;&gt;Toronto Open Data&lt;/a&gt; to generate a histogram of the usage of rental bikes in Toronto during the month of June in 2020.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;opendatatoronto&amp;quot;, 
                 repos = &amp;quot;http://cran.us.r-project.org&amp;quot;,
                 dependencies = TRUE)
library(opendatatoronto)
library(tidyverse)
library(lubridate)
library(shiny)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;ui&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;UI&lt;/h2&gt;
&lt;p&gt;There are two user inputs on the UI side:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A slider that limits the maximum and minimum of the displayed values&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A checkbox that excludes users with a annual bike pass&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;        sidebarPanel(
            sliderInput(&amp;quot;dur&amp;quot;,
                        &amp;quot;Trip Duration:&amp;quot;,
                        min = 0,
                        max = 500,
                        value = c(0,500)),
            checkboxInput(&amp;quot;freq&amp;quot;,
                        &amp;quot;Exclude annual users:&amp;quot;,
                        value = FALSE))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;server&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Server&lt;/h2&gt;
&lt;p&gt;The following code is used for the server side logic, this includes downloading the data from the ‘opendatatoronto’ library.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt; # get package
    package &amp;lt;- show_package(&amp;quot;7e876c24-177c-4605-9cef-e50dd74c617f&amp;quot;)
    
    # get all resources for this package
    resources &amp;lt;- list_package_resources(&amp;quot;7e876c24-177c-4605-9cef-e50dd74c617f&amp;quot;)
    # identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
    datastore_resources &amp;lt;- filter(resources, tolower(format) %in% c(&amp;#39;zip&amp;#39;, &amp;#39;geojson&amp;#39;))
    # load the first datastore resource as a sample
    data &amp;lt;- filter(datastore_resources, name == &amp;quot;Bike share ridership 2020&amp;quot;) %&amp;gt;% get_resource()
    data2 &amp;lt;-  data$`2020-06.csv`
    data2[grepl(&amp;quot;Time&amp;quot;,names(data2))] &amp;lt;- 
        lapply(data2[grepl(&amp;quot;Time&amp;quot;,names(data2))], parse_date_time, orders = &amp;quot;mdy HM&amp;quot;)
    data2$Dur &amp;lt;- as.numeric(data2$End.Time - data2$Start.Time,units=&amp;quot;mins&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;application&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Application&lt;/h2&gt;
&lt;p&gt;The final application takes a while to load as the data needs to be downloaded and sorted through. In future iterations, I would save the data locally as an RDS file.&lt;/p&gt;
&lt;iframe src=&#34;https://m2edney.shinyapps.io/Toronto_bike/?_ga=2.75026646.519818068.1645317226-1341333380.1645206372&#34; width=&#34;672&#34; height=&#34;400px&#34; data-external=&#34;1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
</description>
      
            <category>Shiny App</category>
      
            <category>R</category>
      
      
            <category>Project</category>
      
    </item>
    
    <item>
      <title>New features in R</title>
      <link>https://datasandbox.netlify.app/post/2022-02-23-new-features-in-r/</link>
      <pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-02-23-new-features-in-r/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-02-23-new-features-in-r/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@cbpsc1?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Clint Patterson&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/s/photos/update?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Recently I had updated my RStudio client and with it came a new update to R. This is an exploration of some of the most interesting changes from R 4.0 to R 4.1.&lt;/p&gt;
&lt;div id=&#34;native-pipe-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Native Pipe Function&lt;/h2&gt;
&lt;p&gt;Due to the extreme popularity of the magrittr pipe (‘%&amp;gt;%’), R has developed its own native pipe (‘|&amp;gt;’).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
data(&amp;quot;morley&amp;quot;)
morley |&amp;gt;
        group_by(Expt) |&amp;gt;
        summarise(mean = mean(Speed, na.rm=TRUE))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##    Expt  mean
##   &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
## 1     1  909 
## 2     2  856 
## 3     3  845 
## 4     4  820.
## 5     5  832.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this example, it is apparent that the behaviour of the native pipe is the same as the magrittr pipe.&lt;/p&gt;
&lt;p&gt;Some of the differences I have found is that the native pipe requires the brackets for functions, while the magrittr pipe will usually accept just the function name.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2 %&amp;gt;% sqrt()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.414214&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2 |&amp;gt; sqrt()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.414214&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2 %&amp;gt;% sqrt&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.414214&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;2 |&amp;gt; sqrt&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error: The pipe operator requires a function call as RHS&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One disadvantage of the native pipe is that it doesn’t support the placeholder operator (.) which helps refer to the data in the function. This is a useful function of the magrittr pipe when the data isn’t the first argument in the function, such as the lm function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;morley %&amp;gt;% lm(Speed~Run, data = .)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Speed ~ Run, data = .)
## 
## Coefficients:
## (Intercept)          Run  
##    856.0947      -0.3519&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;morley |&amp;gt; lm(Speed~Run, data = .)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Error in is.data.frame(data): object &amp;#39;.&amp;#39; not found&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One advantage is there is no performance penalty as it acts the same as the function call. This is shown with the microbenchmark function, which shows not only the same level of performance as the regular call, but even the results themselves are shown as the function call.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(microbenchmark)
microbenchmark(sqrt(3),
               4 |&amp;gt; sqrt(),
               5 %&amp;gt;% sqrt())&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Unit: nanoseconds
##          expr  min   lq mean median   uq   max neval
##       sqrt(3)    0    0   47      0  100   300   100
##       sqrt(4)    0    0   79      0  100  5200   100
##  5 %&amp;gt;% sqrt() 2000 2100 2387   2100 2200 24400   100&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So when should we use the native vs the magrittr pipe? Well, it looks like not all the functionality of the magrittr pipe is carried over, so it should still be continued to be used. The native pipe, however, provides a good performance boost, which makes it a better option for code written in functions and libraries. I think that the major application should be to increase the readability of library and function code.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;lambda-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Lambda Functions&lt;/h2&gt;
&lt;p&gt;There has been a simplification in the creation of lambda functions. The notation is simplified, while the results are the same.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
x &amp;lt;- 0:10/10
y1 &amp;lt;- function(x) x + 0.5
y2 &amp;lt;- \(x) x^2 +1
g &amp;lt;- ggplot(data.frame(x=x)) +
        geom_function(fun = y1, aes(color = &amp;quot;blue&amp;quot;)) +
        geom_function(fun = y2, aes(color = &amp;quot;red&amp;quot;))
g&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://datasandbox.netlify.app/post/2022-02-23-new-features-in-r/index.en_files/figure-html/lambda-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;other-minor-changes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Other minor changes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The default has been changed for ‘stringsAsFactors = FALSE’. Previously, when using the data.frame() or the read.table() the default option would turn strings into factors. This was an annoying feature that would always create headaches.&lt;/li&gt;
&lt;li&gt;Introduction of an experimental implementation of hash tables. This development should be watched for people keen on program performance.&lt;/li&gt;
&lt;li&gt;c() can now combine factors to create a new factor. I am not familiar with the original behaviour, but this seems intuitive.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description>
      
            <category>R</category>
      
      
            <category>General</category>
      
    </item>
    
    <item>
      <title>Speed cameras in Toronto</title>
      <link>https://datasandbox.netlify.app/post/2022-02-16-/</link>
      <pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-02-16-/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-02-16-/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@sepidehgolchin?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Sepideh Golchin Rad&lt;/a&gt; on &lt;a href=&#34;https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This project was originally written on 02/01/2021 as part of the Data Products
course for the Data Science Specialization from Johns Hopkins University on Coursera&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;objective&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Objective&lt;/h2&gt;
&lt;p&gt;This report plots the speed cameras in the Greater Toronto Area from the data provided
by Open Toronto which can be found &lt;a href=&#34;https://open.toronto.ca/dataset/automated-speed-enforcement-locations/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;inialization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inialization&lt;/h2&gt;
&lt;p&gt;The following code is used to initialize the required libraries.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;install.packages(&amp;quot;opendatatoronto&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;, dependencies = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## package &amp;#39;opendatatoronto&amp;#39; successfully unpacked and MD5 sums checked
## 
## The downloaded binary packages are in
##  C:\Users\Mark\AppData\Local\Temp\RtmpymM2E5\downloaded_packages&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(opendatatoronto)
library(dplyr)
library(leaflet)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following code is provided by the Open Toronto site to download the dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# get package
package &amp;lt;- show_package(&amp;quot;a154790c-4a8a-4d09-ab6b-535ddb646770&amp;quot;)

# get all resources for this package
resources &amp;lt;- list_package_resources(&amp;quot;a154790c-4a8a-4d09-ab6b-535ddb646770&amp;quot;)

# identify datastore resources; by default, Toronto Open Data sets datastore resource format to CSV for non-geospatial and GeoJSON for geospatial resources
datastore_resources &amp;lt;- filter(resources, tolower(format) %in% c(&amp;#39;csv&amp;#39;, &amp;#39;geojson&amp;#39;))

# load the first datastore resource as a sample
data &amp;lt;- filter(datastore_resources, row_number()==1) %&amp;gt;% get_resource()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;plotting-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Plotting the Data&lt;/h2&gt;
&lt;p&gt;The geometry in the dataset can be used directly with leaflet and the longitude and
latitude do not need to be separated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df &amp;lt;- data$geometry&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Custom icons for the speed cameras can be used with the following code:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cameraicon &amp;lt;- makeIcon(
        iconUrl = &amp;quot;https://www.flaticon.com/svg/static/icons/svg/2164/2164608.svg&amp;quot;,
        iconWidth = 35, iconHeight = 35
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally all the data and options can be passed to the leaflet function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plt &amp;lt;- df %&amp;gt;%
        leaflet() %&amp;gt;%
        addTiles() %&amp;gt;%
        addMarkers(icon = cameraicon, clusterOptions = markerClusterOptions(), popup = data$location)&lt;/code&gt;&lt;/pre&gt;
&lt;iframe src=&#34;https://rstudio-pubs-static.s3.amazonaws.com/867843_8ceb2632490f457f9620fec73acc7e2c.html&#34; width=&#34;672&#34; height=&#34;400px&#34; data-external=&#34;1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
</description>
      
            <category>R</category>
      
            <category>Leaflet</category>
      
      
            <category>Project</category>
      
    </item>
    
    <item>
      <title>Fancy Tables in R</title>
      <link>https://datasandbox.netlify.app/post/2022-02-11-fancy-tables-in-r/</link>
      <pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-02-11-fancy-tables-in-r/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-02-11-fancy-tables-in-r/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;blockquote&gt;
&lt;p&gt;Photo by &lt;a href=&#34;https://unsplash.com/@nosoylasonia?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Juan Gomez&lt;/a&gt; on &lt;a href=&#34;&#34;&gt;&lt;a href=&#34;https://unsplash.com/s/photos/tables?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&#34;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As a continuation from my previous post exploring the use of the Stargazer library to create better looking tables, I thought I would look into the GT library. The GT library takes a different approach by creating an object class with the GT function. It is still able to create great looking tables in html or latex, but also adds support for RTF.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;gt-library-intuition&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;GT Library Intuition&lt;/h2&gt;
&lt;p&gt;The use of the GT library is pretty simple and starts with the creation of a GT object. For this example, I will use the ChickenWeight database that looks at the weights of different chickens.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(gt)
library(tidyverse)
data(&amp;quot;ChickWeight&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dataframe or tibble is passed into the GT function, which can be passed into additional modifier functions. This is better outlined and easier understood using the piping operator from the magrittr library, which is also included in the tidyverse library. The piping operator is incredibly useful and common.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ChickWeight %&amp;gt;% head() %&amp;gt;% gt()&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;nkcxnnkhgs&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#nkcxnnkhgs .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#nkcxnnkhgs .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#nkcxnnkhgs .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#nkcxnnkhgs .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 6px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#nkcxnnkhgs .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#nkcxnnkhgs .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#nkcxnnkhgs .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#nkcxnnkhgs .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#nkcxnnkhgs .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#nkcxnnkhgs .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#nkcxnnkhgs .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#nkcxnnkhgs .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#nkcxnnkhgs .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#nkcxnnkhgs .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#nkcxnnkhgs .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#nkcxnnkhgs .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#nkcxnnkhgs .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#nkcxnnkhgs .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#nkcxnnkhgs .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#nkcxnnkhgs .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#nkcxnnkhgs .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#nkcxnnkhgs .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#nkcxnnkhgs .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#nkcxnnkhgs .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#nkcxnnkhgs .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#nkcxnnkhgs .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#nkcxnnkhgs .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#nkcxnnkhgs .gt_left {
  text-align: left;
}

#nkcxnnkhgs .gt_center {
  text-align: center;
}

#nkcxnnkhgs .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#nkcxnnkhgs .gt_font_normal {
  font-weight: normal;
}

#nkcxnnkhgs .gt_font_bold {
  font-weight: bold;
}

#nkcxnnkhgs .gt_font_italic {
  font-style: italic;
}

#nkcxnnkhgs .gt_super {
  font-size: 65%;
}

#nkcxnnkhgs .gt_footnote_marks {
  font-style: italic;
  font-weight: normal;
  font-size: 65%;
}
&lt;/style&gt;
&lt;table class=&#34;gt_table&#34;&gt;
  
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_right&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;weight&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_right&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;Time&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;Chick&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;Diet&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;&lt;td class=&#34;gt_row gt_right&#34;&gt;42&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td class=&#34;gt_row gt_right&#34;&gt;51&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34;&gt;2&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td class=&#34;gt_row gt_right&#34;&gt;59&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34;&gt;4&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td class=&#34;gt_row gt_right&#34;&gt;64&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34;&gt;6&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td class=&#34;gt_row gt_right&#34;&gt;76&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34;&gt;8&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td class=&#34;gt_row gt_right&#34;&gt;93&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34;&gt;10&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
  
  
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;The result is a simple a clean table the displays the required data. There is a set structure for the GT objects, which is outlined in the following diagram:
&lt;img src=&#34;images/gt_parts_of_a_table.svg&#34; alt=&#34;GT table structure&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;function-chaining&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Function Chaining&lt;/h2&gt;
&lt;p&gt;As previously mentioned, by chaining GT functions together, we can add elements to the table. These elements can include titles, footnotes, source notes and conditional formatting similar to what you would use in an Excel table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ChickWeight %&amp;gt;%
        head() %&amp;gt;%
        gt() %&amp;gt;%
        tab_header(
                title = &amp;quot;Chicken Weight data&amp;quot;, 
                subtitle = &amp;quot;remember to weight your chickens!&amp;quot;
        ) %&amp;gt;%
        tab_footnote(footnote = &amp;quot;measured in seconds&amp;quot;,
                     locations = cells_column_labels(Time)) %&amp;gt;%
        tab_source_note(source_note = &amp;quot;From ChickenWeight Database&amp;quot;) %&amp;gt;%
        tab_style(style = cell_fill(color = &amp;quot;red&amp;quot;),
                  locations = cells_body(
                          columns = weight,
                          rows = weight &amp;gt; 50
                  )) %&amp;gt;%
        summary_rows(columns = c(weight,Time),
                           fns = list(
                                   avg = ~mean(., na.rm = TRUE),
                                   total = ~sum(., na.rm = TRUE),
                                   s.d. = ~sd(., na.rm = TRUE))
                           )&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;puoofvxojg&#34; style=&#34;overflow-x:auto;overflow-y:auto;width:auto;height:auto;&#34;&gt;
&lt;style&gt;html {
  font-family: -apple-system, BlinkMacSystemFont, &#39;Segoe UI&#39;, Roboto, Oxygen, Ubuntu, Cantarell, &#39;Helvetica Neue&#39;, &#39;Fira Sans&#39;, &#39;Droid Sans&#39;, Arial, sans-serif;
}

#puoofvxojg .gt_table {
  display: table;
  border-collapse: collapse;
  margin-left: auto;
  margin-right: auto;
  color: #333333;
  font-size: 16px;
  font-weight: normal;
  font-style: normal;
  background-color: #FFFFFF;
  width: auto;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #A8A8A8;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #A8A8A8;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
}

#puoofvxojg .gt_heading {
  background-color: #FFFFFF;
  text-align: center;
  border-bottom-color: #FFFFFF;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#puoofvxojg .gt_title {
  color: #333333;
  font-size: 125%;
  font-weight: initial;
  padding-top: 4px;
  padding-bottom: 4px;
  border-bottom-color: #FFFFFF;
  border-bottom-width: 0;
}

#puoofvxojg .gt_subtitle {
  color: #333333;
  font-size: 85%;
  font-weight: initial;
  padding-top: 0;
  padding-bottom: 6px;
  border-top-color: #FFFFFF;
  border-top-width: 0;
}

#puoofvxojg .gt_bottom_border {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#puoofvxojg .gt_col_headings {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
}

#puoofvxojg .gt_col_heading {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 6px;
  padding-left: 5px;
  padding-right: 5px;
  overflow-x: hidden;
}

#puoofvxojg .gt_column_spanner_outer {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: normal;
  text-transform: inherit;
  padding-top: 0;
  padding-bottom: 0;
  padding-left: 4px;
  padding-right: 4px;
}

#puoofvxojg .gt_column_spanner_outer:first-child {
  padding-left: 0;
}

#puoofvxojg .gt_column_spanner_outer:last-child {
  padding-right: 0;
}

#puoofvxojg .gt_column_spanner {
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: bottom;
  padding-top: 5px;
  padding-bottom: 5px;
  overflow-x: hidden;
  display: inline-block;
  width: 100%;
}

#puoofvxojg .gt_group_heading {
  padding: 8px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
}

#puoofvxojg .gt_empty_group_heading {
  padding: 0.5px;
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  vertical-align: middle;
}

#puoofvxojg .gt_from_md &gt; :first-child {
  margin-top: 0;
}

#puoofvxojg .gt_from_md &gt; :last-child {
  margin-bottom: 0;
}

#puoofvxojg .gt_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  margin: 10px;
  border-top-style: solid;
  border-top-width: 1px;
  border-top-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 1px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 1px;
  border-right-color: #D3D3D3;
  vertical-align: middle;
  overflow-x: hidden;
}

#puoofvxojg .gt_stub {
  color: #333333;
  background-color: #FFFFFF;
  font-size: 100%;
  font-weight: initial;
  text-transform: inherit;
  border-right-style: solid;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
  padding-left: 12px;
}

#puoofvxojg .gt_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#puoofvxojg .gt_first_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
}

#puoofvxojg .gt_grand_summary_row {
  color: #333333;
  background-color: #FFFFFF;
  text-transform: inherit;
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
}

#puoofvxojg .gt_first_grand_summary_row {
  padding-top: 8px;
  padding-bottom: 8px;
  padding-left: 5px;
  padding-right: 5px;
  border-top-style: double;
  border-top-width: 6px;
  border-top-color: #D3D3D3;
}

#puoofvxojg .gt_striped {
  background-color: rgba(128, 128, 128, 0.05);
}

#puoofvxojg .gt_table_body {
  border-top-style: solid;
  border-top-width: 2px;
  border-top-color: #D3D3D3;
  border-bottom-style: solid;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
}

#puoofvxojg .gt_footnotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#puoofvxojg .gt_footnote {
  margin: 0px;
  font-size: 90%;
  padding: 4px;
}

#puoofvxojg .gt_sourcenotes {
  color: #333333;
  background-color: #FFFFFF;
  border-bottom-style: none;
  border-bottom-width: 2px;
  border-bottom-color: #D3D3D3;
  border-left-style: none;
  border-left-width: 2px;
  border-left-color: #D3D3D3;
  border-right-style: none;
  border-right-width: 2px;
  border-right-color: #D3D3D3;
}

#puoofvxojg .gt_sourcenote {
  font-size: 90%;
  padding: 4px;
}

#puoofvxojg .gt_left {
  text-align: left;
}

#puoofvxojg .gt_center {
  text-align: center;
}

#puoofvxojg .gt_right {
  text-align: right;
  font-variant-numeric: tabular-nums;
}

#puoofvxojg .gt_font_normal {
  font-weight: normal;
}

#puoofvxojg .gt_font_bold {
  font-weight: bold;
}

#puoofvxojg .gt_font_italic {
  font-style: italic;
}

#puoofvxojg .gt_super {
  font-size: 65%;
}

#puoofvxojg .gt_footnote_marks {
  font-style: italic;
  font-weight: normal;
  font-size: 65%;
}
&lt;/style&gt;
&lt;table class=&#34;gt_table&#34;&gt;
  &lt;thead class=&#34;gt_header&#34;&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;5&#34; class=&#34;gt_heading gt_title gt_font_normal&#34; style&gt;Chicken Weight data&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th colspan=&#34;5&#34; class=&#34;gt_heading gt_subtitle gt_font_normal gt_bottom_border&#34; style&gt;remember to weight your chickens!&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;thead class=&#34;gt_col_headings&#34;&gt;
    &lt;tr&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_left&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_right&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;weight&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_right&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;Time&lt;sup class=&#34;gt_footnote_marks&#34;&gt;1&lt;/sup&gt;&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;Chick&lt;/th&gt;
      &lt;th class=&#34;gt_col_heading gt_columns_bottom_border gt_center&#34; rowspan=&#34;1&#34; colspan=&#34;1&#34;&gt;Diet&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody class=&#34;gt_table_body&#34;&gt;
    &lt;tr&gt;&lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34;&gt;42&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34;&gt;0&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34; style=&#34;background-color: #FF0000;&#34;&gt;51&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34;&gt;2&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34; style=&#34;background-color: #FF0000;&#34;&gt;59&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34;&gt;4&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34; style=&#34;background-color: #FF0000;&#34;&gt;64&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34;&gt;6&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34; style=&#34;background-color: #FF0000;&#34;&gt;76&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34;&gt;8&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td class=&#34;gt_row gt_left gt_stub&#34;&gt;&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34; style=&#34;background-color: #FF0000;&#34;&gt;93&lt;/td&gt;
&lt;td class=&#34;gt_row gt_right&#34;&gt;10&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;
&lt;td class=&#34;gt_row gt_center&#34;&gt;1&lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_stub gt_right gt_grand_summary_row gt_first_grand_summary_row&#34;&gt;avg&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right gt_grand_summary_row gt_first_grand_summary_row&#34;&gt;64.17&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right gt_grand_summary_row gt_first_grand_summary_row&#34;&gt;5.00&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center gt_grand_summary_row gt_first_grand_summary_row&#34;&gt;&amp;mdash;&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center gt_grand_summary_row gt_first_grand_summary_row&#34;&gt;&amp;mdash;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_stub gt_right gt_grand_summary_row&#34;&gt;total&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right gt_grand_summary_row&#34;&gt;385.00&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right gt_grand_summary_row&#34;&gt;30.00&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center gt_grand_summary_row&#34;&gt;&amp;mdash;&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center gt_grand_summary_row&#34;&gt;&amp;mdash;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_row gt_stub gt_right gt_grand_summary_row&#34;&gt;s.d.&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right gt_grand_summary_row&#34;&gt;18.24&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_right gt_grand_summary_row&#34;&gt;3.74&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center gt_grand_summary_row&#34;&gt;&amp;mdash;&lt;/td&gt;
      &lt;td class=&#34;gt_row gt_center gt_grand_summary_row&#34;&gt;&amp;mdash;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
  &lt;tfoot class=&#34;gt_sourcenotes&#34;&gt;
    &lt;tr&gt;
      &lt;td class=&#34;gt_sourcenote&#34; colspan=&#34;5&#34;&gt;From ChickenWeight Database&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
  &lt;tfoot&gt;
    &lt;tr class=&#34;gt_footnotes&#34;&gt;
      &lt;td colspan=&#34;5&#34;&gt;
        &lt;p class=&#34;gt_footnote&#34;&gt;
          &lt;sup class=&#34;gt_footnote_marks&#34;&gt;
            &lt;em&gt;1&lt;/em&gt;
          &lt;/sup&gt;
           
          measured in seconds
          &lt;br /&gt;
        &lt;/p&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tfoot&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;helper-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Helper functions&lt;/h2&gt;
&lt;p&gt;The previous code includes smaller helper functions within the element functions. These functions (ex. cells_body) provide targeting information for locations or conditioning. There is a learning curve for these functions, I would recommend looking them up as you work on your table rather than trying to learn them all. The everything() function seems to be of particular usefulness, as it allows you to use all values, such as all columns.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;additional-notes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Additional notes&lt;/h2&gt;
&lt;p&gt;The summary_rows function can create summary rows for each grouping if the grouping is defined in the function or if the data is grouped itself. You can then use the grand_summary_rows function to create a grand summary.&lt;/p&gt;
&lt;p&gt;It is always good practice to pass the na.rm = TRUE for your summary functions. Without it, you can create undesirable results.&lt;/p&gt;
&lt;p&gt;A useful resource for learning the GT library is an article on R studio found &lt;a href=&#34;https://gt.rstudio.com/articles/intro-creating-gt-tables.html&#34;&gt;here&lt;/a&gt;. It goes through more in depth on the topics that I have skimmed over.&lt;/p&gt;
&lt;/div&gt;
</description>
      
            <category>R</category>
      
      
            <category>How-to</category>
      
    </item>
    
    <item>
      <title>Professional Tables with Stargazer</title>
      <link>https://datasandbox.netlify.app/post/2022-02-08-professional-tables/</link>
      <pubDate>Tue, 08 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-02-08-professional-tables/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-02-08-professional-tables/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;blockquote&gt;
&lt;p&gt;This post was inspired by the following &lt;a href=&#34;https://www.youtube.com/watch?v=YQ2Dd3CSa0U&amp;amp;list=WL&amp;amp;index=55&#34;&gt;youtube video&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Tables from regression models or just plain data in R are poorly organized. The have
little formatting and are unfit for publishing. This point is illustrated with the
CO2 dataset. This dataset looks at the CO2 uptake of six different types of grass.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data(co2)
mdl  &amp;lt;- lm(CO2$uptake ~ CO2$Plant)
mdl&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = CO2$uptake ~ CO2$Plant)
## 
## Coefficients:
##  (Intercept)   CO2$Plant.L   CO2$Plant.Q   CO2$Plant.C   CO2$Plant^4  
##     27.21310     -22.94230      -4.61669       4.66802       2.33920  
##  CO2$Plant^5   CO2$Plant^6   CO2$Plant^7   CO2$Plant^8   CO2$Plant^9  
##      4.31450      -0.03902      -2.03649      -3.27825      -9.06702  
## CO2$Plant^10  CO2$Plant^11  
##      0.54631       1.91215&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;stargazer&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Stargazer&lt;/h2&gt;
&lt;p&gt;The solution is to use the Stargazer library. The stargazer library contains the
stargazer function which does a lot of work for the user to create tables in Latex
format. It can even compare multiple models in the same table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(stargazer)
mdl2 &amp;lt;- glm(CO2$uptake ~ CO2$Plant, family = Gamma)
stargazer(mdl, mdl2,  title = &amp;quot;CO2 Uptake of plants model&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## % Table created by stargazer v.5.2.2 by Marek Hlavac, Harvard University. E-mail: hlavac at fas.harvard.edu
## % Date and time: Fri, Mar 18, 2022 - 4:40:14 PM
## \begin{table}[!htbp] \centering 
##   \caption{CO2 Uptake of plants model} 
##   \label{} 
## \begin{tabular}{@{\extracolsep{5pt}}lcc} 
## \\[-1.8ex]\hline 
## \hline \\[-1.8ex] 
##  &amp;amp; \multicolumn{2}{c}{\textit{Dependent variable:}} \\ 
## \cline{2-3} 
## \\[-1.8ex] &amp;amp; \multicolumn{2}{c}{uptake} \\ 
## \\[-1.8ex] &amp;amp; \textit{OLS} &amp;amp; \textit{gamma} \\ 
## \\[-1.8ex] &amp;amp; (1) &amp;amp; (2)\\ 
## \hline \\[-1.8ex] 
##  Plant.L &amp;amp; $-$22.942$^{***}$ &amp;amp; 0.041$^{***}$ \\ 
##   &amp;amp; (3.100) &amp;amp; (0.005) \\ 
##   &amp;amp; &amp;amp; \\ 
##  Plant.Q &amp;amp; $-$4.617 &amp;amp; 0.012$^{***}$ \\ 
##   &amp;amp; (3.100) &amp;amp; (0.004) \\ 
##   &amp;amp; &amp;amp; \\ 
##  Plant.C &amp;amp; 4.668 &amp;amp; $-$0.010$^{**}$ \\ 
##   &amp;amp; (3.100) &amp;amp; (0.005) \\ 
##   &amp;amp; &amp;amp; \\ 
##  Plant$\hat{\mkern6mu}$4 &amp;amp; 2.339 &amp;amp; $-$0.013$^{***}$ \\ 
##   &amp;amp; (3.100) &amp;amp; (0.005) \\ 
##   &amp;amp; &amp;amp; \\ 
##  Plant$\hat{\mkern6mu}$5 &amp;amp; 4.314 &amp;amp; $-$0.011$^{**}$ \\ 
##   &amp;amp; (3.100) &amp;amp; (0.004) \\ 
##   &amp;amp; &amp;amp; \\ 
##  Plant$\hat{\mkern6mu}$6 &amp;amp; $-$0.039 &amp;amp; 0.001 \\ 
##   &amp;amp; (3.100) &amp;amp; (0.004) \\ 
##   &amp;amp; &amp;amp; \\ 
##  Plant$\hat{\mkern6mu}$7 &amp;amp; $-$2.036 &amp;amp; 0.011$^{**}$ \\ 
##   &amp;amp; (3.100) &amp;amp; (0.005) \\ 
##   &amp;amp; &amp;amp; \\ 
##  Plant$\hat{\mkern6mu}$8 &amp;amp; $-$3.278 &amp;amp; 0.016$^{***}$ \\ 
##   &amp;amp; (3.100) &amp;amp; (0.005) \\ 
##   &amp;amp; &amp;amp; \\ 
##  Plant$\hat{\mkern6mu}$9 &amp;amp; $-$9.067$^{***}$ &amp;amp; 0.019$^{***}$ \\ 
##   &amp;amp; (3.100) &amp;amp; (0.005) \\ 
##   &amp;amp; &amp;amp; \\ 
##  Plant$\hat{\mkern6mu}$10 &amp;amp; 0.546 &amp;amp; 0.004 \\ 
##   &amp;amp; (3.100) &amp;amp; (0.004) \\ 
##   &amp;amp; &amp;amp; \\ 
##  Plant$\hat{\mkern6mu}$11 &amp;amp; 1.912 &amp;amp; $-$0.001 \\ 
##   &amp;amp; (3.100) &amp;amp; (0.004) \\ 
##   &amp;amp; &amp;amp; \\ 
##  Constant &amp;amp; 27.213$^{***}$ &amp;amp; 0.041$^{***}$ \\ 
##   &amp;amp; (0.895) &amp;amp; (0.001) \\ 
##   &amp;amp; &amp;amp; \\ 
## \hline \\[-1.8ex] 
## Observations &amp;amp; 84 &amp;amp; 84 \\ 
## R$^{2}$ &amp;amp; 0.501 &amp;amp;  \\ 
## Adjusted R$^{2}$ &amp;amp; 0.425 &amp;amp;  \\ 
## Log Likelihood &amp;amp;  &amp;amp; $-$290.414 \\ 
## Akaike Inf. Crit. &amp;amp;  &amp;amp; 604.827 \\ 
## Residual Std. Error &amp;amp; 8.203 (df = 72) &amp;amp;  \\ 
## F Statistic &amp;amp; 6.569$^{***}$ (df = 11; 72) &amp;amp;  \\ 
## \hline 
## \hline \\[-1.8ex] 
## \textit{Note:}  &amp;amp; \multicolumn{2}{r}{$^{*}$p$&amp;lt;$0.1; $^{**}$p$&amp;lt;$0.05; $^{***}$p$&amp;lt;$0.01} \\ 
## \end{tabular} 
## \end{table}&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;stargazer(CO2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## % Table created by stargazer v.5.2.2 by Marek Hlavac, Harvard University. E-mail: hlavac at fas.harvard.edu
## % Date and time: Fri, Mar 18, 2022 - 4:40:14 PM
## \begin{table}[!htbp] \centering 
##   \caption{} 
##   \label{} 
## \begin{tabular}{@{\extracolsep{5pt}}lccccccc} 
## \\[-1.8ex]\hline 
## \hline \\[-1.8ex] 
## Statistic &amp;amp; \multicolumn{1}{c}{N} &amp;amp; \multicolumn{1}{c}{Mean} &amp;amp; \multicolumn{1}{c}{St. Dev.} &amp;amp; \multicolumn{1}{c}{Min} &amp;amp; \multicolumn{1}{c}{Pctl(25)} &amp;amp; \multicolumn{1}{c}{Pctl(75)} &amp;amp; \multicolumn{1}{c}{Max} \\ 
## \hline \\[-1.8ex] 
## conc &amp;amp; 84 &amp;amp; 435.000 &amp;amp; 295.924 &amp;amp; 95 &amp;amp; 175 &amp;amp; 675 &amp;amp; 1,000 \\ 
## uptake &amp;amp; 84 &amp;amp; 27.213 &amp;amp; 10.814 &amp;amp; 8 &amp;amp; 17.9 &amp;amp; 37.1 &amp;amp; 46 \\ 
## \hline \\[-1.8ex] 
## \end{tabular} 
## \end{table}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The stargazer function will return a latex table by default which requires a latex
compiler. This post is written in R markdown and knitted to a html without a latex
compiler so I can not demonstrate it natively. You can however knit a RMD file to
a pdf which will utilize a latex compiler. I’ve copied these images of the tables
from such a pdf file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/latex-tb1.png&#34; alt=&#34;Model Table&#34; /&gt;
&lt;img src=&#34;images/latex-tb2.png&#34; alt=&#34;Data Table&#34; /&gt;
It is important to note that when displaying a dataframe in stargazer, the function
will default to a summary of results. This performance can be undone will the summary = FALSE
as a parameter of the function.&lt;/p&gt;
&lt;p&gt;With some basic understanding of the La-Tex language, you can understand what stargazer
is providing. Its nothing fancy that you couldn’t write yourself. It is the convenience
at which you can create these tables that makes it important.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;extra-parameters&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Extra Parameters&lt;/h2&gt;
&lt;p&gt;There are some additional parameters to the function that are useful for different
applications.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;title - creates a title for your table&lt;/li&gt;
&lt;li&gt;dep.var.labels - accepts a list if you would like to rename your variables to make
them easier to read&lt;/li&gt;
&lt;li&gt;covariate.labels - likewise for renaming covariates&lt;/li&gt;
&lt;li&gt;omit.stat - accepts a list of stats that you don’t want in your table&lt;/li&gt;
&lt;li&gt;type- this parameter will change the output format, the options include: “text”
as plain text, “html” and “latex”&lt;/li&gt;
&lt;li&gt;order - lets you reorganize the order of covariates&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      
            <category>R</category>
      
      
            <category>How-to</category>
      
    </item>
    
    <item>
      <title>Job posting analysis</title>
      <link>https://datasandbox.netlify.app/post/2022-01-30-job-posting-analysis/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-01-30-job-posting-analysis/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-01-30-job-posting-analysis/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;Recently, there was a post on medium about the use of Natural Language Processing (NLP)
to study a job posting for keywords. I found that this article was very similar to
R shiny App that I created a while ago. &lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Technology has changed the job application process, making it easier and quicker to
apply to jobs. As a result, the average job posting will receive around 250 resumes.
&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt; So how can hiring managers handle spending their time looking through that
many resumes for one posting? That’s easy, they cheat.&lt;/p&gt;
&lt;p&gt;Hiring Managers no longer look at individual resumes, but use automatic software called
applicant tracking system (ATS). These programs filter resumes by a set of keywords,
reducing the amount of resumes to a more manageable amount. So how can a job applicant
make sure their resume is looked at? Well, they should cheat.&lt;/p&gt;
&lt;p&gt;The medium article I mentioned uses Python and Natural Language Processing (NLP)
to skim through the job posting to look for the most common words used. This is useful
information, but not necessarily the keywords used by the ATS software. I propose the
use of an R Shiny App to filter a job posting by a list of common keywords.&lt;/p&gt;
&lt;p&gt;An R Shiny App is an interactive web based application that runs R code. The syntax
for a Shiny App is a little different from R and requires some additional understanding.
The product will be a basic, interactive program that can be hosted online. One free
Shiny App hosting site that I recommend is &lt;a href=&#34;https://www.shinyapps.io&#34;&gt;shinyapps.io&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;inialization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inialization&lt;/h2&gt;
&lt;p&gt;The shiny App will require the following libraries.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)
library(wordcloud2)
library(tidyverse)
library(XML)
library(rvest)
library(tidytext)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Shiny App will use a csv files which contains a set of keywords that ATS will
look for. This list was found online, but I have modified by adding additional
keywords as I see fit. The file can be downloaded &lt;a href=&#34;https://github.com/mark-edney/Resumes/blob/master/Word_Cloud/Keywords.csv&#34;&gt;here&lt;/a&gt; from my GitHub site. Here
is a sample of some keywords:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Keywords &amp;lt;- read_csv(&amp;quot;Keywords.csv&amp;quot;) 
Keywords$Keys %&amp;gt;% head()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;.NET&amp;quot;                &amp;quot;account management&amp;quot;  &amp;quot;accounting&amp;quot;         
## [4] &amp;quot;accounts payable&amp;quot;    &amp;quot;accounts receivable&amp;quot; &amp;quot;acquisition&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;app-structure&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;App Structure&lt;/h2&gt;
&lt;p&gt;One issue I found when developing this application was the use of keywords that are
a combination of multiple words. This creates some complications, as a simple search
of keywords would use only the first word and lose the context.&lt;/p&gt;
&lt;p&gt;This challenge was met by breaking the website down into ngrams. An over simplification
of a ngram is a group of n number of words. Wikipedia has a very good page that
better explains ngrams.&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; The website can then be split into ngrams of different
lengths and the keywords searched for.&lt;/p&gt;
&lt;p&gt;As a example, the phrase:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The quick brown fox&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;for a ngram of length 1 would return:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(The) (quick) (brown) (fox)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;for a ngram of length 2 would return:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(The quick) (quick brown) (brown fox)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and for a ngram of length 3 would return:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(The quick brown) (quick brown fox)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div id=&#34;application-coding&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Application Coding&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;shinyApp(
#This is the standard format for a shiny app
        
#The UI function controls all the frontend for the app
        ui = fluidPage(
                titlePanel(&amp;quot;Job Posting Word Cloud&amp;quot;),
                sidebarLayout(
                        sidebarPanel(
#The user is asked for a url
                                textInput(&amp;quot;url&amp;quot;, &amp;quot;input URL&amp;quot;, value = &amp;quot;https://www.google.com/&amp;quot;)
                                ),
                        mainPanel(
#The word cloud plot is displayed
                                h4(&amp;quot;Key-Word Cloud&amp;quot;),
                                wordcloud2Output(&amp;quot;plot&amp;quot;)
                                )
                        )
                ),
        
#The server function controls the backend for the app
        server = function(input, output){
                
#The keywords are loaded and an index of how many words per keyword is created
                Keywords &amp;lt;- read_csv(&amp;quot;Keywords.csv&amp;quot;)
                Keywords$Keys &amp;lt;- str_to_lower(Keywords$Keys) 
                index &amp;lt;- Keywords$Keys %&amp;gt;% str_count(&amp;quot; &amp;quot;)
                
#The { brackets are used to create reactive functions which continuously run 
                data &amp;lt;- reactive({
#The input variable is how the server side receives data from the ui side
                url &amp;lt;- input$url
#The text is read from the url provide by the user
                data &amp;lt;- text %&amp;gt;%
                        data.frame(text = .)
#Since there are ngrams of length 1-3, there a three search&amp;#39;s that are concatenated together
                rbind(data %&amp;gt;%
#the unnest_tolkens from the tidytext library is used to create the ngrams
                              unnest_tokens(word, text, token = &amp;quot;ngrams&amp;quot;, n= 1) %&amp;gt;%
#A count is performed on each ngram in the website to find the most common ngrams 
                              count(word, name = &amp;#39;freq&amp;#39;, sort = TRUE) %&amp;gt;%
#The ngram count is then filtered by the keywords of the same ngram length
                              filter(word %in% Keywords$Keys[index == 0]),
#The steps are repeated for bigrams (ngrams of length 2) and trigrams(ngrams of length 3)
                      data %&amp;gt;%
                              unnest_tokens(word, text, token = &amp;quot;ngrams&amp;quot;, n= 2) %&amp;gt;%
                              count(word, name = &amp;#39;freq&amp;#39;, sort = TRUE) %&amp;gt;%
                              filter(word %in% Keywords$Keys[index == 1]),
                      data %&amp;gt;%
                              unnest_tokens(word, text, token = &amp;quot;ngrams&amp;quot;, n= 3) %&amp;gt;%
                              count(word, name = &amp;#39;freq&amp;#39;, sort = TRUE) %&amp;gt;%
                              filter(word %in% Keywords$Keys[index == 2]))
                        })
                
#The plot/wordcloud needs to be saved as an output value
#The output variable is how the server sends data back to the UI
                output$plot &amp;lt;- renderWordcloud2({
#One part of the strange syntax of a shiny app is that the since the data is reactive
#and changes with the user input, it is passed in a function so it needs to be called
#as data ()
                        wordcloud2(data())
                        })
        },

  options = list(height = 500)
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;shiny-app&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Shiny App&lt;/h2&gt;
&lt;iframe src=&#34;https://m2edney.shinyapps.io/Word_Cloud/?_ga=2.82297238.1842982076.1647479103-1341333380.1645206372&#34; width=&#34;672&#34; height=&#34;400px&#34; data-external=&#34;1&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes footnotes-end-of-document&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://medium.com/data-marketing-philosophy/use-python-and-nlp-to-boost-your-resume-e4691a58bcc9&#34;&gt;use-python-and-nlp-to-boost-your-resume&lt;/a&gt;&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://ideal.com/resume-screening/&#34;&gt;Resume Screening: A How-To Guide For Recruiters&lt;/a&gt;&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/N-gram&#34;&gt;Wiki: ngrams&lt;/a&gt;&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
      
            <category>R</category>
      
            <category>Shiny App</category>
      
      
            <category>Project</category>
      
    </item>
    
    <item>
      <title>Fitness Tracker Modeling: ML</title>
      <link>https://datasandbox.netlify.app/post/2022-01-29-fitness-tracker-modeling-ml/</link>
      <pubDate>Sat, 29 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-01-29-fitness-tracker-modeling-ml/</guid>
      <description>
&lt;script src=&#34;https://datasandbox.netlify.app/post/2022-01-29-fitness-tracker-modeling-ml/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;blockquote&gt;
&lt;p&gt;The original paper was written on 12/18/2020&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div id=&#34;executive-summary&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Executive Summary&lt;/h1&gt;
&lt;p&gt;This report analyzes collected data on different users preforming barbell lifts
performed at different levels of quality. A machine learning algorithm was used
to create a model to determine the user’s rating based on data collected from multiple
accelerometers. More information on the project can be found &lt;a href=&#34;http://web.archive.org/web/20161224072740/http:/groupware.les.inf.puc-rio.br/har&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;analysis&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Analysis&lt;/h1&gt;
&lt;div id=&#34;initialization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Initialization&lt;/h2&gt;
&lt;p&gt;The following code was used to initialize the required R libraries, as well as downloading the required data and store it into memory. There are some columns of the data that were not required for modelling which were excluded (ex. usernames).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(caret)
library(gbm)
library(dplyr)
library(randomForest)
library(ggplot2)
set.seed(90210)
Ntree &amp;lt;- 200

download.file(&amp;quot;https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv&amp;quot;, &amp;quot;training.csv&amp;quot;)
download.file(&amp;quot;https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv&amp;quot;, &amp;quot;testing.csv&amp;quot;)
train &amp;lt;- read.csv2(&amp;quot;training.csv&amp;quot;, sep = &amp;quot;,&amp;quot;)[,-c(1:7)]
test &amp;lt;- read.csv2(&amp;quot;testing.csv&amp;quot;, sep = &amp;quot;,&amp;quot;)[,-c(1:7)]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;reducing-predictors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reducing predictors&lt;/h2&gt;
&lt;p&gt;The data contains way too many predictors (153 in total) to produce accurate and simple models.
Some trimming is required. The first trim is performed with the near zero variance function from the caret library, which finds the predictors that exhibit near zero variation. These predictors would add little benefit to include in models.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;nz &amp;lt;- nearZeroVar(train)
train &amp;lt;- train[,-nz]
test &amp;lt;- test[-nz]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this step, the number of predictors is reduced to 94. There remains numerous NA values in the data. These values are examined in the next chunk of code.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;maxi &amp;lt;- length(train) - 1
valna &amp;lt;- 1:maxi

for (i in 1:maxi) {
        train[,i] &amp;lt;- as.numeric(train[,i])
        test[,i] &amp;lt;- as.numeric(test[,i])
        valna[i] &amp;lt;- mean(is.na(train[,i]))
}

table(valna)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## valna
##                 0 0.979308938946081 
##                52                41&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code shows that there are 52 predictors that have no missing
data and 41 predictors that are mostly missing values.
These predictors would add little value to the modelling and are removed with the
following code&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;train &amp;lt;- train[, valna == 0]
test &amp;lt;- test[, valna == 0]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The training was then divided to create a validation set which will be used for
cross validation. Note that the random forest algorithm has built in cross validation
with the “out of bag error”. About 1/3 of the data is used in a random forest.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Valid &amp;lt;- createDataPartition(train$classe, p = 0.3)[[1]]
valid &amp;lt;- train[Valid,]
train &amp;lt;- train[-Valid,]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next step is to utilize the variable of importance function in the caret library to reduce the number of predictors even further. The train data is still very large, but by making a sample set from the training data and modelling from that we can get a reasonable approximation of the variables of importance.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;strain &amp;lt;- rbind(sample_n(train[train$classe == &amp;quot;A&amp;quot;,],round(mean(train$classe == &amp;quot;A&amp;quot;)*200,0)),
                sample_n(train[train$classe == &amp;quot;B&amp;quot;,],round(mean(train$classe == &amp;quot;B&amp;quot;)*200,0)),
                sample_n(train[train$classe == &amp;quot;C&amp;quot;,],round(mean(train$classe == &amp;quot;C&amp;quot;)*200,0)),
                sample_n(train[train$classe == &amp;quot;D&amp;quot;,],round(mean(train$classe == &amp;quot;D&amp;quot;)*200,0)),
                sample_n(train[train$classe == &amp;quot;E&amp;quot;,],round(mean(train$classe == &amp;quot;E&amp;quot;)*200,0))
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The sample set was set to ensure an accurate representation of the ‘classe’ variable
in the training data. Two models were completed and their variables of importance
were added together.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mdl1 &amp;lt;- train(classe~., data = strain, method = &amp;quot;rf&amp;quot;, ntree = Ntree)
mdl2 &amp;lt;- train(classe~., data = strain, method = &amp;quot;gbm&amp;quot;, verbose = FALSE)
var &amp;lt;- varImp(mdl1)$importance &amp;gt; 50 | varImp(mdl2)$importance &amp;gt; 50
varorder &amp;lt;- order(varImp(mdl1)$importance, decreasing = TRUE)
Varimp &amp;lt;- row.names(varImp(mdl1)$importance)[varorder[1:2]]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A value of 50 was used for a cut-off value. The total number of predictors has been
reduced to 4.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;valid &amp;lt;- valid[,var]
train &amp;lt;- train[,var]
test &amp;lt;- test[,var]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;modelling&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Modelling&lt;/h2&gt;
&lt;p&gt;With the reduced predictors, the models can now be trained. Since these model will look
at the entire training data set, it will require a lot of time. The models include:&lt;br /&gt;
- Random forest&lt;br /&gt;
- Generalized Boosted&lt;br /&gt;
- Linear Discriminant&lt;br /&gt;
- Combined&lt;br /&gt;
The randomForest function is used as it is more efficient than the train function.
The data method is also more efficient than using the formula method.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mdl11 &amp;lt;- randomForest(x = train[,1:(ncol(train) - 1)], y = as.factor(train[,ncol(train)]), ntree = Ntree, proximity = TRUE)
mdl21 &amp;lt;- train(classe~., data = train, method = &amp;quot;gbm&amp;quot;, verbose = FALSE)
mdl31 &amp;lt;- train(classe~., data = train, method = &amp;quot;lda&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following code constructs the combined model&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pmdl11 &amp;lt;- predict(mdl11, valid)
pmdl21 &amp;lt;- predict(mdl21, valid)
pmdl31 &amp;lt;- predict(mdl31, valid)
join &amp;lt;- data.frame(pmdl11, pmdl21, pmdl31, classe = valid$classe)
jmdl &amp;lt;- randomForest(x = join[,1:3], y = as.factor(join$classe), ntree = Ntree)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;model-evaluation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Model Evaluation&lt;/h2&gt;
&lt;p&gt;The new models will need to be examined against the validation data set. The out of
bag error for the random forest models were not used, as the validation data provides
a uniform comparison for all models. The following function was used to test the models:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Exacc &amp;lt;- function(mdl, test){
        mean(predict(mdl,test) == test$classe)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The model’s accuracy are summarized in the following dataframe when they are used
to predict the results in the validation set:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;##   Model  accuracy
## 1 mdl11 0.8955680
## 2 mdl21 0.7994566
## 3 mdl31 0.3625403
## 4 joint 0.8920020&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;conclusion&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;From the results from the model testing, it is clear that the random forest and the combined are the most accurate models for the validation set. The combined model has approximately the same level of accuracy as the random forest, meaning it is the most heavily weighted model. It also means that the inclusion of the boosted and linear discriminant models do not contribute to its accuracy. For simplification, the random forest model is the best model.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;plot&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Plot&lt;/h1&gt;
&lt;p&gt;The centres of the model can be found from the proximity data. The proximity data is compared to two predictors, the most important predictors. The two most significant predictors would sometimes vary, so the code was changed to be flexible to it.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;index &amp;lt;- names(train) %in% Varimp
mdlp &amp;lt;- classCenter(train[index], train$classe, mdl11$proximity)
mdlp &amp;lt;- as.data.frame(mdlp)
mdlp$classe &amp;lt;- rownames(mdlp)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This centre data can be included with the training data. There are distinctly different regions based off of the different classe values, but the other predictors also contribute to model accuracy.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;index &amp;lt;- names(train) %in% Varimp
names &amp;lt;- names(train[index])

f &amp;lt;- function(name1, name2){
        xval &amp;lt;- sym(name1)
        yval &amp;lt;- sym(name2)
        ggplot(data = train, aes_string(x = xval, y = yval, col = &amp;quot;classe&amp;quot;)) +
                geom_point() +
                geom_point(aes_string(x = xval, y = yval, col = &amp;quot;classe&amp;quot;), size = 10, shape = 4, data = mdlp) +
                labs(title = &amp;quot;Model centers on two variables of importance&amp;quot;)
        }
f(names[1], names[2])&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://datasandbox.netlify.app/post/2022-01-29-fitness-tracker-modeling-ml/index.en_files/figure-html/plot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
      
            <category>GGPlot</category>
      
            <category>ML</category>
      
            <category>R</category>
      
      
            <category>Project</category>
      
    </item>
    
  </channel>
</rss>