<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shiny App on The Data Sandbox</title>
    <link>https://datasandbox.netlify.app/tags/shiny-app/</link>
    <description>Recent content in Shiny App on The Data Sandbox</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 18 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://datasandbox.netlify.app/tags/shiny-app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Making the Connection with Crosstalk</title>
      <link>https://datasandbox.netlify.app/post/2022-03-18-making-the-connection-with-crosstalk/</link>
      <pubDate>Fri, 18 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-03-18-making-the-connection-with-crosstalk/</guid>
      <description>I recently wrote a post about creating dashboards in R which was based on the Flexdashboard library. My largest criticism was the lack of communication between visualizations on the same dashboard. This was before I learned about the Crosstalk package which adds this feature to html widgets, such as the Flexdashboard, to at least a limited degree.
InitializationThe Crosstalk package is available on CRAN and is loaded along with other important packages for this demonstration.</description>
    </item>
    
    <item>
      <title>Creating Dashboards in R</title>
      <link>https://datasandbox.netlify.app/post/2022-03-10-creating-dashboard-in-r/</link>
      <pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-03-10-creating-dashboard-in-r/</guid>
      <description>Dashboards are a great way to demonstrate knowledge and engage decision makers. Their utility has made PowerBI andTableau household names. And while these solutions do support R and Python scripts and visualizations, the Flexdashboard package seeks to compete. The Flexdashboard packages does this all in R with the simplicity of writing a R Markdown file.
Initial SetupThe setup is simple, you just need to download and load the Flexdashboard package.</description>
    </item>
    
    <item>
      <title>Bike shares in Toronto</title>
      <link>https://datasandbox.netlify.app/post/2022-02-27-bike-shares-in-toronto/</link>
      <pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-02-27-bike-shares-in-toronto/</guid>
      <description>Photo by Maarten van den Heuvel on Unsplash
This article is based on a project written on 01/14/2021
Bike Rental Shiny AppThis application use the data collected from the Toronto Open Data to generate a histogram of the usage of rental bikes in Toronto during the month of June in 2020.
install.packages(&amp;quot;opendatatoronto&amp;quot;, repos = &amp;quot;http://cran.us.r-project.org&amp;quot;,dependencies = TRUE)library(opendatatoronto)library(tidyverse)library(lubridate)library(shiny)UIThere are two user inputs on the UI side:</description>
    </item>
    
    <item>
      <title>Job posting analysis</title>
      <link>https://datasandbox.netlify.app/post/2022-01-30-job-posting-analysis/</link>
      <pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://datasandbox.netlify.app/post/2022-01-30-job-posting-analysis/</guid>
      <description>Recently, there was a post on medium about the use of Natural Language Processing (NLP)to study a job posting for keywords. I found that this article was very similar toR shiny App that I created a while ago. 1
IntroductionTechnology has changed the job application process, making it easier and quicker toapply to jobs. As a result, the average job posting will receive around 250 resumes.</description>
    </item>
    
  </channel>
</rss>
